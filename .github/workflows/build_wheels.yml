name: Build wheels

on:
  push:
  pull_request:
    branches: [master, develop]
  release:
    types:
      - published

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        # macos-13 is an intel runner, macos-14 is apple silicon.
        # os: [ubuntu-latest, macos-13, macos-14, [windows-latest]
        os: [ubuntu-latest, macos-13, macos-14, windows-latest]

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.17.0
        env:
          CIBW_BEFORE_ALL_MACOS: brew reinstall gcc fftw lapack
          CIBW_BEFORE_ALL_LINUX: yum install -y fftw-devel openblas-devel
          CIBW_BEFORE_ALL_WINDOWS: >
            C:\\msys64\\usr\\bin\\bash.exe -lc "pacman --noconfirm -Syu" &&
            C:\\msys64\\usr\\bin\\bash.exe -lc "pacman --noconfirm -S mingw-w64-ucrt-x86_64-gcc-fortran mingw-w64-ucrt-x86_64-openblas mingw-w64-ucrt-x86_64-cmake mingw-w64-ucrt-x86_64-fftw"
          # NOTE: oldest-supported-numpy causes issues with pp310-win_amd64
          CIBW_BEFORE_BUILD_WINDOWS: pip install numpy<2.0.0 delvewheel
          CIBW_ENVIRONMENT_WINDOWS: PATH="C:\\msys64\\ucrt64\\bin;$PATH" MSYSTEM="UCRT64"
          CIBW_REPAIR_WHEEL_COMMAND_WINDOWS: "delvewheel repair -w {dest_dir} {wheel}"  # adds DLLs to wheel
          CIBW_SKIP: "*-manylinux_i686 *-musllinux* *-win32"
          # CIBW_ARCHS_LINUX: "auto aarch64"

      - uses: actions/upload-artifact@v4
        with:
          name: cibw-wheels-${{ matrix.os }}-${{ strategy.job-index }}
          path: ./wheelhouse/*.whl

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Setup Miniconda
        uses: conda-incubator/setup-miniconda@v3
        with:
          python-version: 3.12
          mamba-version: "*"
          channels: conda-forge
          channel-priority: strict
          auto-update-conda: true
          miniconda-version: "latest"
          activate-environment: build_sdist

      - name: Set up Conda environment
        shell: bash -l {0}
        run: |
          conda config --set always_yes yes --set changeps1 no
          conda install -q -n build_sdist blas-devel \
                                          fftw \
                                          meson-python \
                                          numpy \
                                          pkg-config \
                                          setuptools_scm \
                                          jupyter \
                                          build

      - name: Build sdist
        shell: bash -l {0}
        run: |
          pipx run build --sdist

      - uses: actions/upload-artifact@v4
        with:
          name: cibw-sdist
          path: dist/*.tar.gz

  upload_pypi:
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    environment: pypi
    permissions:
      id-token: write
    if: github.event_name == 'release' && github.event.action == 'published'
    # or, alternatively, upload to PyPI on every tag starting with 'v' (remove on: release above to use this)
    # if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/download-artifact@v4
        with:
          # unpacks all CIBW artifacts into dist/
          pattern: cibw-*
          path: dist
          merge-multiple: true

      - uses: pypa/gh-action-pypi-publish@release/v1
        with:
          skip-existing: true
          # To test: repository-url: https://test.pypi.org/legacy/
