python module _SHTOOLS
!-------------------------------------------------------------------------------
!
!   Python signature file for the SHTOOLS Fortran 95 routines. The 
!   definitions of how the fortran functions are actually called are found in 
!   the wrapper file PythonWrapper.f95.
!
!   Note: The context of this file is case sensitive. 
!
!-------------------------------------------------------------------------------
    interface
   
        subroutine PlmBar(p,lmax,z,csphase,cnorm,p_d0)
            fortranname pyplmbar
            real*8 dimension(p_d0),intent(out) :: p
            integer intent(in) :: lmax
            real*8 intent(in) :: z
            integer, optional,intent(in) :: csphase = 1
            integer, optional,intent(in) :: cnorm = 0
            integer, intent(hide),depend(lmax) :: p_d0 = (lmax+1)*(lmax+2)/2
        end subroutine PlmBar

        subroutine PlmBar_d1(p,dp,lmax,z,csphase,cnorm,p_d0,dp_d0)
            fortranname pyplmbar_d1
            real*8, dimension(p_d0),intent(out) :: p
            real*8, dimension(dp_d0),intent(out) :: dp
            integer, intent(in) :: lmax
            real*8, intent(in) :: z
            integer, optional,intent(in) :: csphase = 1
            integer, optional,intent(in) :: cnorm = 0
            integer, intent(hide),depend(lmax) :: p_d0 = (lmax+1)*(lmax+2)/2
            integer, intent(hide),depend(lmax) :: dp_d0 = (lmax+1)*(lmax+2)/2
        end subroutine PlmBar_d1

        subroutine PlBar(p,lmax,z,p_d0)
            fortranname pyplbar
            real*8, dimension(p_d0),intent(out) :: p
            integer, intent(in) :: lmax
            real*8, intent(in) :: z
            integer, intent(hide),depend(lmax) :: p_d0 = lmax+1
        end subroutine PlBar

        subroutine PlBar_d1(p,dp,lmax,z,p_d0,dp_d0)
            fortranname pyplbar_d1
            real*8 dimension(p_d0),intent(out) :: p
            real*8 dimension(dp_d0),intent(out):: dp
            integer intent(in) :: lmax
            real*8 intent(in) :: z
            integer intent(hide),depend(lmax) :: p_d0=lmax+1
            integer intent(hide),depend(lmax) :: dp_d0=lmax+1
        end subroutine PlBar_d1

        subroutine PlmSchmidt(p,lmax,z,csphase,cnorm,p_d0)
            fortranname pyplmschmidt
            real*8 dimension(p_d0),intent(out) :: p
            integer intent(in) :: lmax
            real*8 intent(in) :: z
            integer, optional,intent(in) :: csphase = 1
            integer, optional,intent(in) :: cnorm = 0
            integer intent(hide),depend(lmax) :: p_d0 = (lmax+1)*(lmax+2)/2
        end subroutine PlmSchmidt

        subroutine PlSchmidt(p,lmax,z,p_d0)
            fortranname pyplschmidt
            real*8 dimension(p_d0),intent(out) :: p
            integer intent(in) :: lmax
            real*8 intent(in) :: z
            integer intent(hide),depend(lmax) :: p_d0 = lmax+1
        end subroutine PlSchmidt

        subroutine PlmSchmidt_d1(p,dp,lmax,z,csphase,cnorm,p_d0,dp_d0)
            fortranname pyplmschmidt_d1
            real*8 dimension(p_d0),intent(out):: p
            real*8 dimension(dp_d0),intent(out) :: dp
            integer intent(in) :: lmax
            real*8 intent(in) :: z
            integer, optional,intent(in) :: csphase = 1
            integer, optional,intent(in) :: cnorm = 0
            integer intent(hide),depend(lmax) :: p_d0 = (lmax+1)*(lmax+2)/2
            integer intent(hide),depend(lmax) :: dp_d0 = (lmax+1)*(lmax+2)/2
        end subroutine PlmSchmidt_d1

        subroutine PlSchmidt_d1(p,dp,lmax,z,p_d0,dp_d0)
            fortranname pyplschmidt_d1
            real*8 dimension(p_d0),intent(out) :: p
            real*8 dimension(dp_d0),intent(out) :: dp
            integer intent(in) :: lmax
            real*8 intent(in) :: z
            integer intent(hide),depend(lmax) :: p_d0 = lmax+1
            integer intent(hide),depend(lmax) :: dp_d0 = lmax+1
        end subroutine PlSchmidt_d1

        subroutine PLegendre(p,lmax,z,p_d0)
            fortranname pyplegendre
            real*8 dimension(p_d0),intent(out) :: p
            integer intent(in) :: lmax
            real*8 intent(in) :: z
            integer intent(hide),depend(lmax) :: p_d0 = lmax+1
        end subroutine PLegendre

        subroutine PLegendreA(p,lmax,z,csphase,p_d0)
            fortranname pyplegendrea
            real*8 dimension(p_d0),intent(out) :: p
            integer intent(in) :: lmax
            real*8 intent(in) :: z
            integer, optional,intent(in) :: csphase = 1
            integer intent(hide),depend(lmax) :: p_d0 = (lmax+1)*(lmax+2)/2
        end subroutine PLegendreA

        subroutine PLegendre_d1(p,dp,lmax,z,p_d0,dp_d0)
            fortranname pyplegendre_d1
            real*8 dimension(p_d0),intent(out) :: p
            real*8 dimension(dp_d0),intent(out) :: dp
            integer intent(in) :: lmax
            real*8 intent(in) :: z
            integer intent(hide),depend(lmax) :: p_d0 = lmax+1
            integer intent(hide),depend(lmax) :: dp_d0 = lmax+1
        end subroutine PLegendre_d1

        subroutine PLegendreA_d1(p,dp,lmax,z,csphase,p_d0,dp_d0)
            fortranname pyplegendrea_d1
            real*8 dimension(p_d0),intent(out) :: p
            real*8 dimension(dp_d0),intent(out) :: dp
            integer intent(in) :: lmax
            real*8 intent(in) :: z
            integer, optional,intent(in) :: csphase = 1
            integer intent(hide),depend(lmax) :: p_d0 = (lmax+1)*(lmax+2)/2
            integer intent(hide),depend(lmax) :: dp_d0 = (lmax+1)*(lmax+2)/2
        end subroutine PLegendreA_d1

        subroutine CilmPlusDH(cilm,gridin,lmax,nmax,mass,d,rho,sampling,n,gridin_d0,gridin_d1,cilm_d0,cilm_d1,cilm_d2)
            fortranname pycilmplusdh
            real*8 dimension(cilm_d0,cilm_d1,cilm_d2),intent(out) :: cilm
            real*8 dimension(gridin_d0,gridin_d1),intent(in) :: gridin
            integer,optional,intent(in),depend(n) :: lmax = n/2 - 1
            integer intent(in) :: nmax
            real*8 intent(in) :: mass
            real*8 intent(out) :: d
            real*8 intent(in) :: rho
            integer optional,depend(gridin_d0,gridin_d1),intent(in) :: sampling = gridin_d1/gridin_d0
            integer, optional,intent(in),depend(gridin_d0),intent(hide) :: n = gridin_d0
            integer, optional,intent(in),check(shape(gridin,0)==gridin_d0),depend(gridin) :: gridin_d0=shape(gridin,0)
            integer, optional,intent(in),check(shape(gridin,1)==gridin_d1),depend(gridin) :: gridin_d1=shape(gridin,1)
            integer,optional,intent(in),intent(hide) :: cilm_d0 = 2
            integer,optional,intent(in),intent(hide),depend(lmax) :: cilm_d1 = lmax+1
            integer,optional,intent(in),intent(hide),depend(lmax) :: cilm_d2 = lmax+1
        end subroutine CilmPlusDH

        subroutine CilmMinusDH(cilm,gridin,lmax,nmax,mass,d,rho,sampling,n,gridin_d0,gridin_d1,cilm_d0,cilm_d1,cilm_d2)
            fortranname pycilmminusdh
            real*8 dimension(cilm_d0,cilm_d1,cilm_d2),intent(out) :: cilm
            real*8 dimension(gridin_d0,gridin_d1),intent(in) :: gridin
            integer,optional,intent(in),depend(n) :: lmax = n/2 - 1
            integer intent(in) :: nmax
            real*8 intent(in) :: mass
            real*8 intent(out) :: d
            real*8 intent(in) :: rho
            integer depend(gridin_d0,gridin_d1),intent(hide) :: sampling = gridin_d1/gridin_d0
            integer, optional,intent(in),depend(gridin_d0) :: n = gridin_d0
            integer, optional,intent(in),check(shape(gridin,0)==gridin_d0),depend(gridin) :: gridin_d0=shape(gridin,0)
            integer, optional,intent(in),check(shape(gridin,1)==gridin_d1),depend(gridin) :: gridin_d1=shape(gridin,1)
            integer,optional,intent(in),intent(hide) :: cilm_d0 = 2
            integer,optional,intent(in),intent(hide),depend(lmax) :: cilm_d1 = lmax+1
            integer,optional,intent(in),intent(hide),depend(lmax) :: cilm_d2 = lmax+1
        end subroutine CilmMinusDH

        subroutine CilmPlusRhoHDH(cilm,gridin,rho,lmax,nmax,mass,d,sampling,n,gridin_d0,gridin_d1,cilm_d0,cilm_d1,cilm_d2,rho_d0,rho_d1)
            fortranname pycilmplusrhohdh
            real*8 dimension(cilm_d0,cilm_d1,cilm_d2),intent(out) :: cilm
            real*8 dimension(gridin_d0,gridin_d1),intent(in) :: gridin
            real*8 dimension(rho_d0,rho_d1),intent(in) :: rho
            integer,optional,intent(in),depend(n) :: lmax = n/2 - 1
            integer intent(in) :: nmax
            real*8 intent(in) :: mass
            real*8 intent(out) :: d
            integer, optional,depend(gridin_d0,gridin_d1) :: sampling = gridin_d1/gridin_d0
            integer, optional,intent(in),depend(gridin_d0):: n = gridin_d0
            integer, optional,intent(in),check(shape(gridin,0)==gridin_d0),depend(gridin) :: gridin_d0=shape(gridin,0)
            integer, optional,intent(in),check(shape(gridin,1)==gridin_d1),depend(gridin) :: gridin_d1=shape(gridin,1)
            integer,optional,intent(in),intent(hide) :: cilm_d0 = 2
            integer,optional,intent(in),intent(hide),depend(lmax) :: cilm_d1 = lmax+1
            integer,optional,intent(in),intent(hide),depend(lmax) :: cilm_d2 = lmax+1
            integer, optional,intent(in),check(shape(rho,0)==rho_d0),depend(rho) :: rho_d0=shape(rho,0)
            integer, optional,intent(in),check(shape(rho,1)==rho_d1),depend(rho) :: rho_d1=shape(rho,1)
        end subroutine CilmPlusRhoHDH

        subroutine CilmMinusRhoHDH(cilm,gridin,rho,lmax,nmax,mass,d,sampling,n,gridin_d0,gridin_d1,cilm_d0,cilm_d1,cilm_d2,rho_d0,rho_d1)
            fortranname pycilmminusrhohdh
            real*8 dimension(cilm_d0,cilm_d1,cilm_d2),intent(out) :: cilm
            real*8 dimension(gridin_d0,gridin_d1),intent(in) :: gridin
            real*8 dimension(rho_d0,rho_d1),intent(in) :: rho
            integer,optional,intent(in),depend(n) :: lmax = n/2 - 1
            integer intent(in) :: nmax
            real*8 intent(in) :: mass
            real*8 intent(out) :: d
            integer optional,depend(gridin_d0,gridin_d1), :: sampling = gridin_d1/gridin_d0
            integer, optional,intent(in),depend(gridin_d0) :: n = gridin_d0
            integer, optional,intent(in),check(shape(gridin,0)==gridin_d0),depend(gridin) :: gridin_d0=shape(gridin,0)
            integer, optional,intent(in),check(shape(gridin,1)==gridin_d1),depend(gridin) :: gridin_d1=shape(gridin,1)
            integer,optional,intent(in),intent(hide) :: cilm_d0 = 2
            integer,optional,intent(in),intent(hide),depend(lmax) :: cilm_d1 = lmax+1
            integer,optional,intent(in),intent(hide),depend(lmax) :: cilm_d2 = lmax+1
            integer, optional,intent(in),check(shape(rho,0)==rho_d0),depend(rho) :: rho_d0=shape(rho,0)
            integer, optional,intent(in),check(shape(rho,1)==rho_d1),depend(rho) :: rho_d1=shape(rho,1)
        end subroutine CilmMinusRhoHDH

        subroutine BAtoHilmDH(cilm,ba,griddh,lmax,nmax,mass,r0,rho,sampling,filter_type,filter_deg,lmax_calc,ba_d0,ba_d1,ba_d2,griddh_d0,griddh_d1,cilm_d0,cilm_d1,cilm_d2)
            fortranname pybatohilmdh
            real*8 dimension(cilm_d0,cilm_d1,cilm_d2),intent(out) :: cilm
            real*8 dimension(ba_d0,ba_d1,ba_d2),intent(in) :: ba
            real*8 dimension(griddh_d0,griddh_d1),intent(in) :: griddh
            integer,optional,intent(in),depend(griddh_d0) :: lmax = griddh_d0/2 - 1
            integer intent(in) :: nmax
            real*8 intent(in) :: mass
            real*8 intent(in) :: r0
            real*8 intent(in) :: rho
            integer optional,intent(in),depend(griddh_d0,griddh_d1) :: sampling = griddh_d1/griddh_d0
            integer, optional,intent(in) :: filter_type = 0
            integer, optional,intent(in) :: filter_deg = 0
            integer, optional,intent(in),depend(lmax) :: lmax_calc = lmax
            integer, optional,intent(in),check(shape(ba,0)==ba_d0),depend(ba) :: ba_d0=shape(ba,0)
            integer, optional,intent(in),check(shape(ba,1)==ba_d1),depend(ba) :: ba_d1=shape(ba,1)
            integer, optional,intent(in),check(shape(ba,2)==ba_d2),depend(ba) :: ba_d2=shape(ba,2)
            integer, optional,intent(in),check(shape(griddh,0)==griddh_d0),depend(griddh) :: griddh_d0=shape(griddh,0)
            integer, optional,intent(in),check(shape(griddh,1)==griddh_d1),depend(griddh) :: griddh_d1=shape(griddh,1)
            integer,optional,intent(in),intent(hide) :: cilm_d0 = 2
            integer,optional,intent(in),intent(hide),depend(lmax_calc) :: cilm_d1 = lmax_calc + 1
            integer,optional,intent(in),intent(hide),depend(lmax_calc) :: cilm_d2 = lmax_calc + 1
        end subroutine BAtoHilmDH

        subroutine BAtoHilmRhoHDH(cilm,ba,griddh,rho,lmax,nmax,mass,r0,sampling,filter_type,filter_deg,lmax_calc,ba_d0,ba_d1,ba_d2,griddh_d0,griddh_d1,cilm_d0,cilm_d1,cilm_d2,rho_d0,rho_d1)
            fortranname pybatohilmrhohdh
            real*8 dimension(cilm_d0,cilm_d1,cilm_d2),intent(out) :: cilm
            real*8 dimension(ba_d0,ba_d1,ba_d2),intent(in) :: ba
            real*8 dimension(griddh_d0,griddh_d1),intent(in) :: griddh
            real*8 dimension(rho_d0,rho_d1),intent(in) :: rho
            integer,optional,intent(in),depend(griddh_d0) :: lmax = griddh_d0/2 - 1
            integer intent(in) :: nmax
            real*8 intent(in) :: mass
            real*8 intent(in) :: r0
            integer optional,intent(in),depend(griddh_d0,griddh_d1) :: sampling = griddh_d1/griddh_d0
            integer, optional,intent(in) :: filter_type = 0
            integer, optional,intent(in) :: filter_deg = 0
            integer, optional,intent(in),depend(lmax) :: lmax_calc = lmax
            integer, optional,intent(in),check(shape(ba,0)==ba_d0),depend(ba) :: ba_d0=shape(ba,0)
            integer, optional,intent(in),check(shape(ba,1)==ba_d1),depend(ba) :: ba_d1=shape(ba,1)
            integer, optional,intent(in),check(shape(ba,2)==ba_d2),depend(ba) :: ba_d2=shape(ba,2)
            integer, optional,intent(in),check(shape(griddh,0)==griddh_d0),depend(griddh) :: griddh_d0=shape(griddh,0)
            integer, optional,intent(in),check(shape(griddh,1)==griddh_d1),depend(griddh) :: griddh_d1=shape(griddh,1)
            integer,optional,intent(in),intent(hide) :: cilm_d0 = 2
            integer,optional,intent(in),intent(hide),depend(lmax_calc) :: cilm_d1 = lmax_calc + 1
            integer,optional,intent(in),intent(hide),depend(lmax_calc) :: cilm_d2 = lmax_calc + 1
            integer, optional,intent(in),check(shape(rho,0)==rho_d0),depend(rho) :: rho_d0=shape(rho,0)
            integer, optional,intent(in),check(shape(rho,1)==rho_d1),depend(rho) :: rho_d1=shape(rho,1)
        end subroutine BAtoHilmRhoHDH

        subroutine MakeGrid2D(grid,cilm,lmax,interval,nlat,nlong,norm,csphase,f,a,north,south,east,west,dealloc,cilm_d0,cilm_d1,cilm_d2,grid_d0,grid_d1)
            fortranname pymakegrid2d
            real*8 dimension(grid_d0,grid_d1),intent(out) :: grid
            real*8 dimension(cilm_d0,cilm_d1,cilm_d2),intent(in) :: cilm
            integer, optional,intent(in),depend(cilm_d1) :: lmax = cilm_d1-1
            real*8 intent(in) :: interval = 1.0
            integer, intent(hide) :: nlat
            integer, intent(hide) :: nlong
            integer, optional,intent(in) :: norm = 1
            integer, optional,intent(in) :: csphase = 1
            real*8, optional,intent(in) :: f = -1.0
            real*8, optional,intent(in) :: a = -1.0
            real*8, optional,intent(in) :: north = 90.0
            real*8, optional,intent(in) :: south = -90.0
            real*8, optional,intent(in) :: east = 360.0
            real*8, optional,intent(in) :: west = 0.0
            integer, optional,intent(in) :: dealloc = 0
            integer, optional,intent(in),check(shape(cilm,0)==cilm_d0),depend(cilm),intent(hide) :: cilm_d0=shape(cilm,0)
            integer, optional,intent(in),check(shape(cilm,1)==cilm_d1),depend(cilm),intent(hide) :: cilm_d1=shape(cilm,1)
            integer, optional,intent(in),check(shape(cilm,2)==cilm_d2),depend(cilm),intent(hide) :: cilm_d2=shape(cilm,2)
            integer, optional,intent(in),depend(north,south,interval),intent(hide)  :: grid_d0 = (north-south)/interval + 1
            integer, optional,intent(in),depend(east,west,interval),intent(hide) :: grid_d1 = (east-west)/interval + 1
        end subroutine MakeGrid2d

        subroutine GLQGridCoord(latglq,longlq,lmax,nlat,nlong,latglq_d0,longlq_d0)
            fortranname pyglqgridcoord
            real*8 dimension(latglq_d0),intent(out) :: latglq
            real*8 dimension(longlq_d0),intent(out) :: longlq
            integer intent(in) :: lmax
            integer intent(hide) :: nlat
            integer intent(hide) :: nlong
            integer, optional,intent(in),depend(lmax),intent(hide) :: latglq_d0 = lmax+1
            integer, optional,intent(in),depend(lmax),intent(hide) :: longlq_d0 = 2*lmax+1
        end subroutine GLQGridCoord

        subroutine MakeGridGLQ(gridglq,cilm,lmax,zero,norm,csphase,lmax_calc,gridglq_d0,gridglq_d1,cilm_d0,cilm_d1,cilm_d2,zero_d0)
            fortranname pymakegridglq
            real*8 dimension(gridglq_d0,gridglq_d1),intent(out) :: gridglq
            real*8 dimension(cilm_d0,cilm_d1,cilm_d2),intent(in) :: cilm
            integer, optional,intent(in),depend(cilm_d1) :: lmax=cilm_d1-1
            real*8, dimension(zero_d0),intent(in) :: zero
            integer, optional,intent(in) :: norm = 1
            integer, optional,intent(in) :: csphase = 1
            integer, optional,intent(in),depend(lmax) :: lmax_calc = lmax
            integer, optional,intent(in),depend(lmax),intent(hide) :: gridglq_d0 = lmax+1
            integer, optional,intent(in),depend(lmax),intent(hide) :: gridglq_d1 = 2*lmax+1
            integer, optional,intent(in),check(shape(cilm,0)==cilm_d0),depend(cilm),intent(hide) :: cilm_d0=shape(cilm,0)
            integer, optional,intent(in),check(shape(cilm,1)==cilm_d1),depend(cilm),intent(hide) :: cilm_d1=shape(cilm,1)
            integer, optional,intent(in),check(shape(cilm,2)==cilm_d2),depend(cilm),intent(hide) :: cilm_d2=shape(cilm,2)
            integer, optional,intent(in),check(len(zero)>=zero_d0),depend(zero),intent(hide) :: zero_d0=len(zero)
        end subroutine MakeGridGLQ

        subroutine SHExpandGLQ(cilm,lmax,gridglq,w,zero,norm,csphase,lmax_calc,cilm_d0,cilm_d1,cilm_d2,gridglq_d0,gridglq_d1,zero_d0,w_d0)
            fortranname pyshexpandglq
            real*8 dimension(cilm_d0,cilm_d1,cilm_d2),intent(out), :: cilm
            integer, intent(hide),depend(gridglq_d0) :: lmax=gridglq_d0-1
            real*8 dimension(gridglq_d0,gridglq_d1),intent(in) :: gridglq
            real*8 dimension(w_d0),intent(in) :: w
            real*8, dimension(zero_d0),intent(in) :: zero
            integer, optional,intent(in) :: norm = 1 
            integer, optional,intent(in) :: csphase = 1
            integer, optional,intent(in),depend(lmax) :: lmax_calc = lmax
            integer, optional,intent(in),intent(hide) :: cilm_d0 = 2
            integer, optional,intent(in),depend(lmax_calc),intent(hide) :: cilm_d1 = lmax_calc+1
            integer, optional,intent(in),depend(lmax_calc),intent(hide) :: cilm_d2 = lmax_calc+1
            integer, optional,intent(in),check(shape(gridglq,0)==gridglq_d0),depend(gridglq),intent(hide) :: gridglq_d0=shape(gridglq,0)
            integer, optional,intent(in),check(shape(gridglq,1)==gridglq_d1),depend(gridglq),intent(hide) :: gridglq_d1=shape(gridglq,1)
            integer, optional,intent(in),check(len(zero)>=zero_d0),depend(zero),intent(hide) :: zero_d0=len(zero)
            integer, optional,intent(in),check(len(w)>=w_d0),depend(w),intent(hide) :: w_d0=len(w)
        end subroutine SHExpandGLQ

        subroutine SHGLQ(lmax,zero,w,zero_d0,w_d0)
            fortranname pyshglq
            integer intent(in) :: lmax
            real*8 dimension(zero_d0),intent(out):: zero
            real*8 dimension(w_d0),intent(out) :: w
            integer intent(in),depend(lmax),intent(hide) :: zero_d0 = lmax + 1
            integer intent(in),depend(lmax),intent(hide) :: w_d0 = lmax + 1
        end subroutine SHGLQ

        subroutine PreGLQ(x1,x2,n,zero,w,zero_d0,w_d0)
            fortranname pypreglq
            real*8 intent(in) :: x1
            real*8 intent(in) :: x2
            integer intent(in) :: n
            real*8 dimension(zero_d0),intent(out) :: zero
            real*8 dimension(w_d0),intent(out) :: w
            integer, optional,intent(in),depend(n),intent(hide) :: zero_d0 = n
            integer, optional,intent(in),depend(n),intent(hide) :: w_d0 = n
        end subroutine PreGLQ

        subroutine SHRead(filename,cilm,lmax,lmax_in,skip,cilm_d0,cilm_d1,cilm_d2)
            fortranname pyshread
            character*(*) intent(in) :: filename
            real*8 dimension(cilm_d0,cilm_d1,cilm_d2),intent(out) :: cilm
            integer intent(out) :: lmax
            integer intent(in)  :: lmax_in
            integer, optional,intent(in) :: skip = 0
            integer, optional,intent(in),intent(hide) :: cilm_d0 = 2
            integer, optional,intent(in),depend(lmax_in),intent(hide) :: cilm_d1 = lmax_in+1
            integer, optional,intent(in),depend(lmax_in),intent(hide) :: cilm_d2 = lmax_in+1
        end subroutine SHRead
        
        subroutine SHReadH(filename,cilm,lmax,lmax_in,nheader,header,skip,cilm_d0,cilm_d1,cilm_d2)
            fortranname pyshreadh
            character*(*) intent(in) :: filename
            real*8 dimension(cilm_d0,cilm_d1,cilm_d2),intent(out) :: cilm
            integer intent(out) :: lmax
            integer intent(in)  :: lmax_in
            integer, intent(in) :: nheader
            real*8 intent(out), dimension(nheader) :: header
            integer, optional,intent(in) :: skip = 0
            integer, optional,intent(in),depend(lmax),intent(hide) :: cilm_d0 = 2
            integer, optional,intent(in),depend(lmax_in),intent(hide) :: cilm_d1 = lmax_in+1
            integer, optional,intent(in),depend(lmax_in),intent(hide) :: cilm_d2 = lmax_in+1
        end subroutine SHReadH

        subroutine SHReadError(filename,cilm,error,lmax,lmax_in,skip,cilm_d0,cilm_d1,cilm_d2,error_d0,error_d1,error_d2)
            fortranname pyshreaderror
            character*(*) intent(in) :: filename
            real*8 dimension(cilm_d0,cilm_d1,cilm_d2),intent(out) :: cilm
            real*8 dimension(error_d0,error_d1,error_d2),intent(out) :: error
            integer intent(out) :: lmax
            integer intent(in)  :: lmax_in
            integer, optional,intent(in) :: skip = 0          
            integer, optional,intent(in),depend(lmax),intent(hide) :: cilm_d0 = 2
            integer, optional,intent(in),depend(lmax_in),intent(hide) :: cilm_d1 = lmax_in+1
            integer, optional,intent(in),depend(lmax_in),intent(hide) :: cilm_d2 = lmax_in+1
            integer, optional,intent(in),depend(cilm_d0),intent(hide) :: error_d0 = cilm_d0
            integer, optional,intent(in),depend(cilm_d1),intent(hide) :: error_d1 = cilm_d1
            integer, optional,intent(in),depend(cilm_d2),intent(hide) :: error_d2 = cilm_d2
        end subroutine SHReadError

        subroutine SHReadErrorH(filename,cilm,error,lmax,lmax_in,nheader,header,skip,cilm_d0,cilm_d1,cilm_d2,error_d0,error_d1,error_d2)
            fortranname pyshreaderrorh
            character*(*) intent(in) :: filename
            real*8 dimension(cilm_d0,cilm_d1,cilm_d2),intent(out) :: cilm
            real*8 dimension(error_d0,error_d1,error_d2),intent(out) :: error
            integer intent(out) :: lmax
            integer intent(in)  :: lmax_in
            integer, intent(in) :: nheader
            real*8, intent(out),dimension(nheader) :: header
            integer, optional,intent(in) :: skip = 0          
            integer, optional,intent(in),depend(lmax),intent(hide) :: cilm_d0 = 2
            integer, optional,intent(in),depend(lmax_in),intent(hide) :: cilm_d1 = lmax_in+1
            integer, optional,intent(in),depend(lmax_in),intent(hide) :: cilm_d2 = lmax_in+1
            integer, optional,intent(in),depend(cilm_d0),intent(hide) :: error_d0 = cilm_d0
            integer, optional,intent(in),depend(cilm_d1),intent(hide) :: error_d1 = cilm_d1
            integer, optional,intent(in),depend(cilm_d2),intent(hide) :: error_d2 = cilm_d2
        end subroutine SHReadErrorH

        subroutine MakeMagGridDH(cilm,lmax,r0,a,f,rad,theta,phi,total,n,sampling,lmax_calc,total_d0,total_d1,cilm_d0,cilm_d1,cilm_d2,rad_d0,rad_d1,theta_d0,theta_d1,phi_d0,phi_d1)
            fortranname pymakemaggriddh
            real*8 dimension(cilm_d0,cilm_d1,cilm_d2),intent(in) :: cilm
            integer, optional,intent(in),depend(cilm_d1) :: lmax = cilm_d1 -1
            real*8 intent(in) :: r0
            real*8, optional,intent(in),depend(r0) :: a = r0
            real*8, optional,intent(in) :: f = 0.0
            real*8 dimension(rad_d0,rad_d1),intent(out) :: rad
            real*8 dimension(theta_d0,theta_d1),intent(out) :: theta
            real*8 dimension(phi_d0,phi_d1),intent(out) :: phi
            real*8 dimension(total_d0,total_d1),intent(out) :: total
            integer intent(hide) :: n
            integer, optional,intent(in) :: sampling = 2
            integer, optional,intent(in),depend(lmax) :: lmax_calc = lmax
            integer, optional,intent(in),depend(lmax),intent(hide) :: total_d0 = 2*(lmax+1)
            integer, optional,intent(in),depend(total_d0,sampling) :: total_d1 = total_d0*sampling
            integer, optional,intent(in),check(shape(cilm,0)==cilm_d0),depend(cilm),intent(hide) :: cilm_d0=shape(cilm,0)
            integer, optional,intent(in),check(shape(cilm,1)==cilm_d1),depend(cilm),intent(hide) :: cilm_d1=shape(cilm,1)
            integer, optional,intent(in),check(shape(cilm,2)==cilm_d2),depend(cilm),intent(hide) :: cilm_d2=shape(cilm,2)
            integer, optional,intent(in),intent(hide),depend(total_d0) :: rad_d0 = total_d0
            integer, optional,intent(in),intent(hide),depend(total_d1)  :: rad_d1 = total_d1
            integer, optional,intent(in),intent(hide),depend(total_d0) :: theta_d0 = total_d0
            integer, optional,intent(in),intent(hide),depend(total_d1) :: theta_d1 = total_d1
            integer, optional,intent(in),intent(hide),depend(total_d0) :: phi_d0 = total_d0
            integer, optional,intent(in),intent(hide),depend(total_d1)  :: phi_d1 = total_d1
        end subroutine MakeMagGridDH

        function SHPowerL(c,l,c_d0,c_d1,c_d2)
            fortranname pyshpowerl
            real*8 dimension(c_d0,c_d1,c_d2),intent(in) :: c
            integer intent(in) :: l
            integer, optional,intent(in),depend(c),intent(hide) :: c_d0=shape(c,0)
            integer, optional,intent(in),depend(c),intent(hide) :: c_d1=shape(c,1)
            integer, optional,intent(in),depend(c),intent(hide) :: c_d2=shape(c,2)
            real*8 :: SHPowerL
        end function SHPowerL

        function SHPowerDensityL(c,l,c_d0,c_d1,c_d2)
            fortranname pyshpowerdensityl
            real*8 dimension(c_d0,c_d1,c_d2),intent(in) :: c
            integer intent(in) :: l
            integer, optional,intent(in),check(shape(c,0)==c_d0),depend(c),intent(hide) :: c_d0=shape(c,0)
            integer, optional,intent(in),check(shape(c,1)==c_d1),depend(c),intent(hide) :: c_d1=shape(c,1)
            integer, optional,intent(in),check(shape(c,2)==c_d2),depend(c),intent(hide) :: c_d2=shape(c,2)
            real*8 :: SHPowerDensityL
        end function SHPowerDensityL

        function SHCrossPowerL(c1,c2,l,c2_d0,c2_d1,c2_d2,c1_d0,c1_d1,c1_d2)
            fortranname pyshcrosspowerl
            real*8 dimension(c1_d0,c1_d1,c1_d2),intent(in) :: c1
            real*8 dimension(c2_d0,c2_d1,c2_d2),intent(in) :: c2
            integer intent(in) :: l
            integer, optional,intent(in),check(shape(c2,0)==c2_d0),depend(c2),intent(hide) :: c2_d0=shape(c2,0)
            integer, optional,intent(in),check(shape(c2,1)==c2_d1),depend(c2),intent(hide) :: c2_d1=shape(c2,1)
            integer, optional,intent(in),check(shape(c2,2)==c2_d2),depend(c2),intent(hide) :: c2_d2=shape(c2,2)
            integer, optional,intent(in),check(shape(c1,0)==c1_d0),depend(c1),intent(hide) :: c1_d0=shape(c1,0)
            integer, optional,intent(in),check(shape(c1,1)==c1_d1),depend(c1),intent(hide) :: c1_d1=shape(c1,1)
            integer, optional,intent(in),check(shape(c1,2)==c1_d2),depend(c1),intent(hide) :: c1_d2=shape(c1,2)
            real*8 :: SHCrossPowerL
        end function SHCrossPowerL

        function SHCrossPowerDensityL(c1,c2,l,c2_d0,c2_d1,c2_d2,c1_d0,c1_d1,c1_d2)
            fortranname pyshcrosspowerdensityl
            real*8 dimension(c1_d0,c1_d1,c1_d2),intent(in) :: c1
            real*8 dimension(c2_d0,c2_d1,c2_d2),intent(in) :: c2
            integer intent(in) :: l
            integer, optional,intent(in),check(shape(c2,0)==c2_d0),depend(c2),intent(hide) :: c2_d0=shape(c2,0)
            integer, optional,intent(in),check(shape(c2,1)==c2_d1),depend(c2),intent(hide) :: c2_d1=shape(c2,1)
            integer, optional,intent(in),check(shape(c2,2)==c2_d2),depend(c2),intent(hide) :: c2_d2=shape(c2,2)
            integer, optional,intent(in),check(shape(c1,0)==c1_d0),depend(c1),intent(hide) :: c1_d0=shape(c1,0)
            integer, optional,intent(in),check(shape(c1,1)==c1_d1),depend(c1),intent(hide) :: c1_d1=shape(c1,1)
            integer, optional,intent(in),check(shape(c1,2)==c1_d2),depend(c1),intent(hide) :: c1_d2=shape(c1,2)
            real*8 :: SHCrossPowerDensityL
        end function SHCrossPowerDensityL

        subroutine SHPowerSpectrum(c,lmax,spectra,c_d0,c_d1,c_d2,spectra_d0)
            fortranname pyshpowerspectrum
            real*8 dimension(c_d0,c_d1,c_d2),intent(in) :: c
            integer, optional,intent(in),depend(c) :: lmax = shape(c,1)-1
            real*8 dimension(spectra_d0),intent(out) :: spectra
            integer, optional,intent(in),check(shape(c,0)==c_d0),depend(c),intent(hide) :: c_d0=shape(c,0)
            integer, optional,intent(in),check(shape(c,1)==c_d1),depend(c),intent(hide) :: c_d1=shape(c,1)
            integer, optional,intent(in),check(shape(c,2)==c_d2),depend(c),intent(hide) :: c_d2=shape(c,2)
            integer, optional,intent(in),depend(lmax),intent(hide) :: spectra_d0=lmax+1
        end subroutine SHPowerSpectrum

        subroutine SHPowerSpectrumDensity(c,lmax,spectra,c_d0,c_d1,c_d2,spectra_d0)
            fortranname pyshpowerspectrumdensity
            real*8 dimension(c_d0,c_d1,c_d2),intent(in) :: c
            integer, optional,intent(in),depend(c) :: lmax = shape(c,1)-1
            real*8 dimension(spectra_d0),intent(out) :: spectra
            integer, optional,intent(in),check(shape(c,0)==c_d0),depend(c),intent(hide) :: c_d0=shape(c,0)
            integer, optional,intent(in),check(shape(c,1)==c_d1),depend(c),intent(hide) :: c_d1=shape(c,1)
            integer, optional,intent(in),check(shape(c,2)==c_d2),depend(c),intent(hide) :: c_d2=shape(c,2)
            integer, optional,intent(in),depend(lmax),intent(hide) :: spectra_d0=lmax+1
        end subroutine SHPowerSpectrumDensity

        subroutine SHCrossPowerSpectrum(c1,c2,lmax,cspectra,c2_d0,c2_d1,c2_d2,c1_d0,c1_d1,c1_d2,cspectra_d0)
            fortranname pyshcrosspowerspectrum
            real*8 dimension(c1_d0,c1_d1,c1_d2),intent(in) :: c1
            real*8 dimension(c2_d0,c2_d1,c2_d2),intent(in) :: c2
            integer, optional,intent(in),depend(c1_d1,c2_d1) :: lmax = min(c1_d1,c2_d1)-1
            real*8 dimension(cspectra_d0),intent(out) :: cspectra
            integer, optional,intent(in),check(shape(c2,0)==c2_d0),depend(c2),intent(hide) :: c2_d0=shape(c2,0)
            integer, optional,intent(in),check(shape(c2,1)==c2_d1),depend(c2),intent(hide) :: c2_d1=shape(c2,1)
            integer, optional,intent(in),check(shape(c2,2)==c2_d2),depend(c2),intent(hide) :: c2_d2=shape(c2,2)
            integer, optional,intent(in),check(shape(c1,0)==c1_d0),depend(c1),intent(hide) :: c1_d0=shape(c1,0)
            integer, optional,intent(in),check(shape(c1,1)==c1_d1),depend(c1),intent(hide) :: c1_d1=shape(c1,1)
            integer, optional,intent(in),check(shape(c1,2)==c1_d2),depend(c1),intent(hide) :: c1_d2=shape(c1,2)
            integer, optional,intent(in),depend(lmax),intent(hide) :: cspectra_d0 = lmax+1
        end subroutine SHCrossPowerSpectrum

        subroutine SHCrossPowerSpectrumDensity(c1,c2,lmax,cspectra,c2_d0,c2_d1,c2_d2,c1_d0,c1_d1,c1_d2,cspectra_d0)
            fortranname pyshcrosspowerspectrumdensity
            real*8 dimension(c1_d0,c1_d1,c1_d2),intent(in) :: c1
            real*8 dimension(c2_d0,c2_d1,c2_d2),intent(in) :: c2
            integer, optional,intent(in),depend(c1_d1,c2_d1) :: lmax = min(c1_d1,c2_d1)-1
            real*8 dimension(cspectra_d0),intent(out) :: cspectra
            integer, optional,intent(in),check(shape(c2,0)==c2_d0),depend(c2),intent(hide) :: c2_d0=shape(c2,0)
            integer, optional,intent(in),check(shape(c2,1)==c2_d1),depend(c2),intent(hide) :: c2_d1=shape(c2,1)
            integer, optional,intent(in),check(shape(c2,2)==c2_d2),depend(c2),intent(hide) :: c2_d2=shape(c2,2)
            integer, optional,intent(in),check(shape(c1,0)==c1_d0),depend(c1),intent(hide) :: c1_d0=shape(c1,0)
            integer, optional,intent(in),check(shape(c1,1)==c1_d1),depend(c1),intent(hide) :: c1_d1=shape(c1,1)
            integer, optional,intent(in),check(shape(c1,2)==c1_d2),depend(c1),intent(hide) :: c1_d2=shape(c1,2)
            integer, optional,intent(in),depend(lmax),intent(hide) :: cspectra_d0 = lmax+1
        end subroutine SHCrossPowerSpectrumDensity

        subroutine djpi2(dj,lmax,dj_d0,dj_d1,dj_d2)
            fortranname pydjpi2
            real*8 dimension(dj_d0,dj_d1,dj_d2),intent(out) :: dj
            integer intent(in) :: lmax
            integer, optional,intent(in),depend(lmax),intent(hide) :: dj_d0 = lmax+1
            integer, optional,intent(in),depend(lmax),intent(hide) :: dj_d1 = lmax+1
            integer, optional,intent(in),depend(lmax),intent(hide) :: dj_d2 = lmax+1
        end subroutine djpi2

        subroutine SHrtoc(rcilm,ccilm,degmax,convention,switchcs,rcilm_d0,rcilm_d1,rcilm_d2,ccilm_d0,ccilm_d1,ccilm_d2)
            fortranname pyshrtoc
            real*8 dimension(rcilm_d0,rcilm_d1,rcilm_d2),intent(in) :: rcilm
            real*8 dimension(ccilm_d0,ccilm_d1,ccilm_d2),intent(out) :: ccilm
            integer, optional,intent(in),depend(rcilm_d1) :: degmax = rcilm_d1-1
            integer, optional,intent(in) :: convention = 1
            integer, optional,intent(in) :: switchcs = 0
            integer, optional,intent(in),check(shape(rcilm,0)==rcilm_d0),depend(rcilm),intent(hide) :: rcilm_d0=shape(rcilm,0)
            integer, optional,intent(in),check(shape(rcilm,1)==rcilm_d1),depend(rcilm),intent(hide) :: rcilm_d1=shape(rcilm,1)
            integer, optional,intent(in),check(shape(rcilm,2)==rcilm_d2),depend(rcilm),intent(hide) :: rcilm_d2=shape(rcilm,2)
            integer, optional,intent(in),depend(rcilm_d0),intent(hide) :: ccilm_d0 = rcilm_d0
            integer, optional,intent(in),depend(rcilm_d1),intent(hide) :: ccilm_d1 = rcilm_d1
            integer, optional,intent(in),depend(rcilm_d2),intent(hide) :: ccilm_d2 = rcilm_d2
        end subroutine SHrtoc

        subroutine SHctor(ccilm,rcilm,degmax,convention,switchcs,rcilm_d0,rcilm_d1,rcilm_d2,ccilm_d0,ccilm_d1,ccilm_d2)
            fortranname pyshctor
            real*8 dimension(ccilm_d0,ccilm_d1,ccilm_d2),intent(in) :: ccilm
            real*8 dimension(rcilm_d0,rcilm_d1,rcilm_d2),intent(out) :: rcilm
            integer, optional,intent(in),depend(ccilm_d1) :: degmax = ccilm_d1-1
            integer, optional,intent(in) :: convention = 1
            integer, optional,intent(in) :: switchcs = 0
            integer, optional,intent(in),depend(ccilm_d0),intent(hide) :: rcilm_d0 = ccilm_d0
            integer, optional,intent(in),depend(ccilm_d1),intent(hide) :: rcilm_d1 = ccilm_d1
            integer, optional,intent(in),depend(ccilm_d2),intent(hide) :: rcilm_d2 = ccilm_d2
            integer, optional,intent(in),check(shape(ccilm,0)==ccilm_d0),depend(ccilm),intent(hide) :: ccilm_d0=shape(ccilm,0)
            integer, optional,intent(in),check(shape(ccilm,1)==ccilm_d1),depend(ccilm),intent(hide) :: ccilm_d1=shape(ccilm,1)
            integer, optional,intent(in),check(shape(ccilm,2)==ccilm_d2),depend(ccilm),intent(hide) :: ccilm_d2=shape(ccilm,2)
        end subroutine SHctor

        subroutine SHCilmToCindex(cilm,cindex,degmax,cindex_d0,cindex_d1,cilm_d0,cilm_d1,cilm_d2)
            fortranname pyshcilmtocindex
            real*8 dimension(cilm_d0,cilm_d1,cilm_d2),intent(in) :: cilm
            real*8 dimension(cindex_d0,cindex_d1),intent(out) :: cindex
            integer, optional,intent(in),depend(cilm_d1) :: degmax = cilm_d1-1
            integer, optional,intent(in),intent(hide) :: cindex_d0 = 2
            integer, optional,intent(in),depend(degmax),intent(hide) :: cindex_d1 = (degmax+1)*(degmax+2)/2
            integer, optional,intent(in),depend(cilm),intent(hide) :: cilm_d0=shape(cilm,0)
            integer, optional,intent(in),depend(cilm),intent(hide) :: cilm_d1=shape(cilm,1)
            integer, optional,intent(in),depend(cilm),intent(hide) :: cilm_d2=shape(cilm,2)
        end subroutine SHCilmToCindex

        subroutine SHCindexToCilm(cindex,cilm,degmax,cindex_d0,cindex_d1,cilm_d0,cilm_d1,cilm_d2)
            fortranname pyshcindextocilm
            real*8 dimension(cindex_d0,cindex_d1),intent(in) :: cindex
            real*8 dimension(cilm_d0,cilm_d1,cilm_d2),intent(out) :: cilm
            integer, optional,intent(in),depend(cindex_d1) :: degmax = (-3+sqrt(1+8*cindex_d1))/2
            integer, optional,intent(in),check(shape(cindex,0)==cindex_d0),depend(cindex),intent(hide) :: cindex_d0=shape(cindex,0)
            integer, optional,intent(in),check(shape(cindex,1)==cindex_d1),depend(cindex),intent(hide) :: cindex_d1=shape(cindex,1)
            integer, optional,intent(in),intent(hide) :: cilm_d0 = 2
            integer, optional,intent(in),depend(degmax),intent(hide) :: cilm_d1 = degmax+1
            integer, optional,intent(in),depend(degmax),intent(hide) :: cilm_d2 = degmax+1
        end subroutine SHCindexToCilm

        subroutine SHRotateCoef(x,cof,rcof,dj,lmax,rcof_d0,rcof_d1,dj_d0,dj_d1,dj_d2,cof_d0,cof_d1)
            fortranname pyshrotatecoef
            real*8 dimension(3),intent(in) :: x
            real*8 dimension(cof_d0,cof_d1),intent(in) :: cof
            real*8 dimension(dj_d0,dj_d1,dj_d2),intent(in) :: dj
            real*8 dimension(rcof_d0,rcof_d1),intent(out) :: rcof
            integer, optional,intent(in),depend(cof_d1) :: lmax = (-3+sqrt(1+8*cof_d1))/2
            integer, optional,intent(in),intent(hide) :: rcof_d0 = 2
            integer, optional,intent(in),depend(lmax),intent(hide) :: rcof_d1 = (lmax+1)*(lmax+2)/2
            integer, optional,intent(in),check(shape(dj,0)==dj_d0),depend(dj),intent(hide) :: dj_d0=shape(dj,0)
            integer, optional,intent(in),check(shape(dj,1)==dj_d1),depend(dj),intent(hide) :: dj_d1=shape(dj,1)
            integer, optional,intent(in),check(shape(dj,2)==dj_d2),depend(dj),intent(hide) :: dj_d2=shape(dj,2)
            integer, optional,intent(in),check(shape(cof,0)==cof_d0),depend(cof),intent(hide) :: cof_d0=shape(cof,0)
            integer, optional,intent(in),check(shape(cof,1)==cof_d1),depend(cof),intent(hide) :: cof_d1=shape(cof,1)
        end subroutine SHRotateCoef

        subroutine SHRotateRealCoef(cilmrot,cilm,lmax,x,dj,x_d0,dj_d0,dj_d1,dj_d2,cilm_d0,cilm_d1,cilm_d2,cilmrot_d0,cilmrot_d1,cilmrot_d2)
            fortranname pyshrotaterealcoef
            real*8 dimension(cilm_d0,cilm_d1,cilm_d2),intent(in) :: cilm
            real*8 dimension(cilmrot_d0,cilmrot_d1,cilmrot_d2),intent(out) :: cilmrot
            integer, optional,intent(in),depend(cilm_d1) :: lmax = cilm_d1-1
            real*8 dimension(x_d0),intent(in) :: x
            real*8 dimension(dj_d0,dj_d1,dj_d2),intent(in) :: dj
            integer, optional,intent(in),check(len(x)>=x_d0),depend(x),intent(hide) :: x_d0=len(x)
            integer, optional,intent(in),check(shape(dj,0)==dj_d0),depend(dj),intent(hide) :: dj_d0=shape(dj,0)
            integer, optional,intent(in),check(shape(dj,1)==dj_d1),depend(dj),intent(hide) :: dj_d1=shape(dj,1)
            integer, optional,intent(in),check(shape(dj,2)==dj_d2),depend(dj),intent(hide) :: dj_d2=shape(dj,2)
            integer, optional,intent(in),check(shape(cilm,0)==cilm_d0),depend(cilm),intent(hide) :: cilm_d0=shape(cilm,0)
            integer, optional,intent(in),check(shape(cilm,1)==cilm_d1),depend(cilm),intent(hide) :: cilm_d1=shape(cilm,1)
            integer, optional,intent(in),check(shape(cilm,2)==cilm_d2),depend(cilm),intent(hide) :: cilm_d2=shape(cilm,2)
            integer, optional,intent(in),depend(lmax),intent(hide) :: cilmrot_d0 = 2
            integer, optional,intent(in),depend(lmax),intent(hide) :: cilmrot_d1 = lmax+1
            integer, optional,intent(in),depend(lmax),intent(hide) :: cilmrot_d2 = lmax+1
        end subroutine SHRotateRealCoef

        subroutine SHExpandDH(grid,n,cilm,lmax,norm,sampling,csphase,lmax_calc,cilm_d0,cilm_d1,cilm_d2,grid_d0,grid_d1)
            fortranname pyshexpanddh
            real*8 dimension(grid_d0,grid_d1),intent(in) :: grid
            integer, intent(hide),depend(grid_d0) :: n=grid_d0
            real*8 dimension(cilm_d0,cilm_d1,cilm_d2),intent(out) :: cilm
            integer, intent(hide) :: lmax
            integer, optional,intent(in) :: norm=1
            integer, optional,intent(in) :: sampling=1
            integer, optional,intent(in) :: csphase=1
            integer, optional,intent(in),depend(n) :: lmax_calc=n/2-1
            integer, optional,intent(in),intent(hide) :: cilm_d0=2
            integer, optional,intent(in),depend(lmax_calc),intent(hide) :: cilm_d1=lmax_calc+1
            integer, optional,intent(in),depend(lmax_calc),intent(hide) :: cilm_d2=lmax_calc+1
            integer, optional,intent(in),check(shape(grid,0)==grid_d0),depend(grid),intent(hide) :: grid_d0=shape(grid,0)
            integer, optional,intent(in),check(shape(grid,1)==grid_d1),depend(grid),intent(hide) :: grid_d1=shape(grid,1)
        end subroutine SHExpandDH

        subroutine MakeGridDH(griddh,n,cilm,lmax,norm,sampling,csphase,lmax_calc,cilm_d0,cilm_d1,cilm_d2,griddh_d0,griddh_d1)
            fortranname pymakegriddh
            real*8 dimension(griddh_d0,griddh_d1),intent(out) :: griddh
            integer, intent(hide) :: n
            real*8 dimension(cilm_d0,cilm_d1,cilm_d2),intent(in) :: cilm
            integer, optional,intent(in),depend(cilm_d1) :: lmax=cilm_d1-1
            integer, optional,intent(in) :: norm = 1
            integer, optional,intent(in) :: sampling = 1
            integer, optional,intent(in) :: csphase = 1
            integer, optional,intent(in),depend(lmax) :: lmax_calc=lmax
            integer, optional,intent(in),depend(cilm),intent(hide) :: cilm_d0=shape(cilm,0)
            integer, optional,intent(in),depend(cilm),intent(hide) :: cilm_d1=shape(cilm,1)
            integer, optional,intent(in),depend(cilm),intent(hide) :: cilm_d2=shape(cilm,2)
            integer, optional,intent(in),depend(lmax),intent(hide) :: griddh_d0=2*(lmax+1)
            integer, optional,intent(in),depend(griddh_d0,sampling),intent(hide) :: griddh_d1=sampling*griddh_d0
        end subroutine MakeGridDH

        function MakeGridPoint(cilm,lmax,lat,longitude,norm,csphase,dealloc,cilm_d0,cilm_d1,cilm_d2)
            fortranname pymakegridpoint
            real*8 dimension(cilm_d0,cilm_d1,cilm_d2),intent(in) :: cilm
            integer, optional,intent(in),depend(cilm_d1) :: lmax = cilm_d1-1
            real*8 intent(in) :: lat
            real*8 intent(in) :: longitude
            integer, optional,intent(in) :: norm = 1
            integer, optional,intent(in) :: csphase = 1
            integer, optional,intent(in) :: dealloc = 0
            integer, optional,intent(in),check(shape(cilm,0)==cilm_d0),depend(cilm),intent(hide) :: cilm_d0=shape(cilm,0)
            integer, optional,intent(in),check(shape(cilm,1)==cilm_d1),depend(cilm),intent(hide) :: cilm_d1=shape(cilm,1)
            integer, optional,intent(in),check(shape(cilm,2)==cilm_d2),depend(cilm),intent(hide) :: cilm_d2=shape(cilm,2)
            real*8 :: MakeGridPoint
        end function MakeGridPoint

        function DownContFilterMA(l,half,r,d)
            fortranname pydowncontfilterma
            integer intent(in) :: l
            integer intent(in) :: half
            real*8 intent(in) :: r
            real*8 intent(in) :: d
            real*8 :: DownContFilterMA
        end function DownContFilterMA

        function DownContFilterMC(l,half,r,d)
            fortranname pydowncontfiltermc
            integer intent(in) :: l
            integer intent(in) :: half
            real*8 intent(in) :: r
            real*8 intent(in) :: d
            real*8 :: DownContFilterMC
        end function DownContFilterMC

        subroutine SHExpandLSQ(cilm,d,lat,lon,nmax,lmax,norm,chi2,csphase,d_d0,lon_d0,cilm_d0,cilm_d1,cilm_d2,lat_d0)
            fortranname pyshexpandlsq
            real*8 dimension(cilm_d0,cilm_d1,cilm_d2),intent(out) :: cilm
            real*8 intent(out) :: chi2
            real*8 dimension(d_d0),intent(in) :: d
            real*8 dimension(lat_d0),intent(in) :: lat
            real*8 dimension(lon_d0),intent(in) :: lon
            integer intent(hide),check(lat_d0==d_d0 && lon_d0==d_d0) :: nmax = d_d0
            integer intent(in) :: lmax
            integer, optional,intent(in) :: norm = 1
            integer, optional,intent(in) :: csphase = 1
            integer, optional,intent(in),depend(d),intent(hide) :: d_d0=len(d)
            integer, optional,intent(in),depend(lon),intent(hide) :: lon_d0=len(lon)
            integer, optional,intent(in),depend(lat),intent(hide) :: lat_d0=len(lat)
            integer, optional,intent(in),intent(hide) :: cilm_d0=2
            integer, optional,intent(in),depend(lmax),intent(hide) :: cilm_d1 = lmax+1
            integer, optional,intent(in),depend(lmax),intent(hide) :: cilm_d2 = lmax+1
        end subroutine SHExpandLSQ

        subroutine SHMultiply(shout,sh1,lmax1,sh2,lmax2,precomp,norm,csphase,sh1_d0,sh1_d1,sh1_d2,sh2_d0,sh2_d1,sh2_d2,shout_d0,shout_d1,shout_d2)
            fortranname pyshmultiply
            real*8 dimension(shout_d0,shout_d1,shout_d2),intent(out) :: shout
            real*8 dimension(sh1_d0,sh1_d1,sh1_d2),intent(in) :: sh1
            integer, optional,intent(in),depend(sh1_d1) :: lmax1 = sh1_d1-1
            real*8 dimension(sh2_d0,sh2_d1,sh2_d2),intent(in) :: sh2
            integer, optional,intent(in),depend(sh2_d1) :: lmax2 = sh2_d1-1
            integer, intent(hide) :: precomp = 0
            integer, optional,intent(in) :: norm = 1
            integer, optional,intent(in) :: csphase = 1
            integer, optional,intent(in),depend(sh1),intent(hide) :: sh1_d0=shape(sh1,0)
            integer, optional,intent(in),depend(sh1),intent(hide) :: sh1_d1=shape(sh1,1)
            integer, optional,intent(in),depend(sh1),intent(hide) :: sh1_d2=shape(sh1,2)
            integer, optional,intent(in),depend(sh2),intent(hide) :: sh2_d0=shape(sh2,0)
            integer, optional,intent(in),depend(sh2),intent(hide) :: sh2_d1=shape(sh2,1)
            integer, optional,intent(in),depend(sh2),intent(hide) :: sh2_d2=shape(sh2,2)
            integer, optional,intent(in),intent(hide) :: shout_d0 = 2
            integer, optional,intent(in),depend(lmax1,lmax2),intent(hide) :: shout_d1 = lmax1+lmax2+1
            integer, optional,intent(in),depend(lmax1,lmax2),intent(hide) :: shout_d2 = lmax1+lmax2+1
        end subroutine SHMultiply

        subroutine ComputeDm(dllm,lmax,m,theta0,dllm_d0,dllm_d1)
            fortranname pycomputedm
            real*8 dimension(dllm_d0,dllm_d1),intent(out) :: dllm
            integer intent(in) :: lmax
            integer intent(in) :: m
            real*8 intent(in) :: theta0
            integer, optional,intent(in),depend(lmax),intent(hide) :: dllm_d0 = lmax+1
            integer, optional,intent(in),depend(lmax),intent(hide) :: dllm_d1 = lmax+1
        end subroutine ComputeDm

        subroutine SphericalCapCoef(coef,theta,lmax,coef_d0)
            fortranname pysphericalcapcoef
            real*8 dimension(coef_d0),intent(out) :: coef
            real*8 intent(in) :: theta
            integer intent(in) :: lmax
            integer, optional,intent(in),depend(lmax),intent(hide) :: coef_d0 = lmax+1
        end subroutine SphericalCapCoef

        subroutine EigValVecSym(ain,n,eig,evec,ul,k,evec_d0,evec_d1,ain_d0,ain_d1,eig_d0)
            fortranname pyeigvalvecsym
            real*8 dimension(ain_d0,ain_d1),intent(in) :: ain
            integer,optional,intent(in),depend(ain_d0) :: n = ain_d0
            real*8 dimension(eig_d0),intent(out) :: eig
            real*8 dimension(evec_d0,evec_d1),intent(out) :: evec
            character, optional,intent(in) :: ul = "U"
            integer, optional,intent(in),depend(n) :: k = n
            integer intent(in),intent(hide),depend(ain_d0) :: evec_d0 = ain_d0
            integer intent(in),intent(hide),depend(ain_d1) :: evec_d1 = ain_d1
            integer, optional,intent(in),check(shape(ain,0)==ain_d0),depend(ain),intent(hide) :: ain_d0=shape(ain,0)
            integer, optional,intent(in),check(shape(ain,1)==ain_d1),depend(ain),intent(hide) :: ain_d1=shape(ain,1)
            integer intent(in),depend(k),intent(hide) :: eig_d0 = k
        end subroutine EigValVecSym

        subroutine SHReturnTapersM(theta0,lmax,m,tapers,eigenvalues,tapers_d0,tapers_d1,eigenvalues_d0)
            fortranname pyshreturntapersm
            real*8 intent(in) :: theta0
            integer intent(in) :: lmax
            integer intent(in) :: m
            real*8 dimension(tapers_d0,tapers_d1),intent(out) :: tapers
            real*8 dimension(eigenvalues_d0),intent(out) :: eigenvalues
            integer intent(in),depend(lmax),intent(hide) :: tapers_d0 = lmax+1
            integer intent(in),depend(lmax),intent(hide) :: tapers_d1 = lmax+1
            integer intent(in),depend(lmax),intent(hide) :: eigenvalues_d0 = lmax+1
        end subroutine SHReturnTapersM

        subroutine EigValSym(ain,n,eval,ul,ain_d0,ain_d1,eval_d0)
            fortranname pyeigvalsym
            real*8 dimension(ain_d0,ain_d1),intent(in) :: ain
            integer,optional,intent(in) :: n = ain_d0
            real*8 dimension(eval_d0),intent(out) :: eval
            character, optional,intent(in) :: ul = "U"
            integer, optional,intent(in),check(shape(ain,0)==ain_d0),depend(ain),intent(hide) :: ain_d0=shape(ain,0)
            integer, optional,intent(in),check(shape(ain,1)==ain_d1),depend(ain),intent(hide) :: ain_d1=shape(ain,1)
            integer intent(in),intent(hide),depend(ain_d0) :: eval_d0 = ain_d0
        end subroutine EigValSym

        function SHFindLWin(theta0,m,alpha,taper_number)
            fortranname pyshfindlwin
            real*8 intent(in) :: theta0
            integer intent(in) :: m
            real*8 intent(in) :: alpha
            integer, optional,intent(in) :: taper_number = 1
            integer :: SHFindLWin
        end function SHFindLWin

        subroutine SHAdmitCorr(G,T,lmax,admit,admit_error,corr,G_d0,G_d1,G_d2,admit_d0,admit_error_d0,T_d0,T_d1,T_d2,corr_d0)
            fortranname pyshadmitcorr
            real*8 dimension(G_d0,G_d1,G_d2),intent(in) :: G
            real*8 dimension(T_d0,T_d1,T_d2),intent(in) :: T
            integer, optional,intent(in),depend(G_d1,T_d1) :: lmax = min(G_d1,T_d1)-1
            real*8 dimension(admit_d0),intent(out) :: admit
            real*8, dimension(admit_error_d0),intent(out) :: admit_error
            real*8 dimension(corr_d0),intent(out) :: corr
            integer, optional,intent(in),check(shape(G,0)==G_d0),depend(G),intent(hide) :: G_d0=shape(G,0)
            integer, optional,intent(in),check(shape(G,1)==G_d1),depend(G),intent(hide) :: G_d1=shape(G,1)
            integer, optional,intent(in),check(shape(G,2)==G_d2),depend(G),intent(hide) :: G_d2=shape(G,2)
            integer, optional,intent(in),check(shape(T,0)==T_d0),depend(T),intent(hide) :: T_d0=shape(T,0)
            integer, optional,intent(in),check(shape(T,1)==T_d1),depend(T),intent(hide) :: T_d1=shape(T,1)
            integer, optional,intent(in),check(shape(T,2)==T_d2),depend(T),intent(hide) :: T_d2=shape(T,2)
            integer, optional,intent(in),depend(lmax),intent(hide) :: admit_d0 = lmax+1
            integer, optional,intent(in),depend(lmax),intent(hide) :: admit_error_d0 = lmax+1
            integer, optional,intent(in),depend(lmax),intent(hide) :: corr_d0 = lmax+1
        end subroutine SHAdmitCorr

        subroutine SHLocalizedAdmitCorr(g,t,tapers,taper_order,k,lat,lon,lwin,lmax,admit,corr,admit_error,corr_error,taper_wt,mtdef,k1linsig,taper_order_d0,g_d0,g_d1,g_d2,taper_wt_d0,corr_error_d0,admit_d0,admit_error_d0,corr_d0,tapers_d0,tapers_d1,t_d0,t_d1,t_d2)
            fortranname pyshlocalizedadmitcorr
            real*8 dimension(g_d0,g_d1,g_d2),intent(in) :: g
            real*8 dimension(t_d0,t_d1,t_d2),intent(in) :: t
            real*8 dimension(tapers_d0,tapers_d1),intent(in) :: tapers
            integer dimension(taper_order_d0),intent(in) :: taper_order
            integer, optional,intent(in),depend(tapers_d1) :: k = tapers_d1
            real*8, intent(in) :: lat
            real*8, intent(in) :: lon
            integer,optional,intent(in),depend(tapers_d0) :: lwin = tapers_d0-1
            integer, optional,intent(in),depend(t_d1,g_d1) :: lmax = min(t_d1-1, g_d1-1)
            real*8 dimension(admit_d0),intent(out) :: admit
            real*8 dimension(corr_d0),intent(out),depend(corr_d0) :: corr
            real*8, dimension(admit_error_d0),intent(out) :: admit_error
            real*8, dimension(corr_error_d0),intent(out) :: corr_error
            real*8, optional,dimension(taper_wt_d0),intent(in) :: taper_wt = -1.0
            integer, optional,intent(in) :: mtdef = 1
            integer, optional,intent(in) :: k1linsig = -1
            integer, optional,intent(in),check(tapers_d0>0),depend(tapers),intent(hide) :: tapers_d0=shape(tapers,0)
            integer, optional,intent(in),check(tapers_d1>0),depend(tapers),intent(hide) :: tapers_d1=shape(tapers,1)
            integer, optional,intent(in),check(taper_order_d0>0),depend(taper_order),intent(hide) :: taper_order_d0=len(taper_order)
            integer, optional,intent(in),check(taper_wt_d0>0),depend(tapers_d1),intent(hide) :: taper_wt_d0=tapers_d1
            integer, optional,intent(in),check(g_d0>0),depend(g),intent(hide) :: g_d0=shape(g,0)
            integer, optional,intent(in),check(g_d1>0),depend(g),intent(hide) :: g_d1=shape(g,1)
            integer, optional,intent(in),check(g_d2>0),depend(g),intent(hide) :: g_d2=shape(g,2)
            integer, optional,intent(in),check(t_d0>0),depend(t),intent(hide) :: t_d0=shape(t,0)
            integer, optional,intent(in),check(t_d1>0),depend(t),intent(hide) :: t_d1=shape(t,1)
            integer, optional,intent(in),check(t_d2>0),depend(t),intent(hide) :: t_d2=shape(t,2)
            integer, optional,intent(in),depend(lmax,lwin),intent(hide) :: corr_error_d0 = lmax-lwin+1
            integer, optional,intent(in),depend(lmax,lwin),intent(hide) :: admit_d0 = lmax-lwin+1
            integer, optional,intent(in),depend(lmax,lwin),intent(hide) :: admit_error_d0 = lmax-lwin+1
            integer, optional,intent(in),depend(lmax,lwin),intent(hide) :: corr_d0 = lmax-lwin+1
        end subroutine SHLocalizedAdmitCorr

        subroutine EigValVecSymTri(ain,n,eig,evec,ul,ain_d0,ain_d1,evec_d0,evec_d1,eig_d0)
            fortranname pyeigvalvecsymtri
            real*8 dimension(ain_d0,ain_d1),intent(in) :: ain
            integer,option,intent(in),depend(ain_d0) :: n = ain_d0
            real*8 dimension(eig_d0),intent(out) :: eig
            real*8 dimension(evec_d0,evec_d1),intent(out) :: evec
            character, optional,intent(in) :: ul = "L"
            integer, optional,intent(in),check(shape(ain,0)==ain_d0),depend(ain),intent(hide) :: ain_d0=shape(ain,0)
            integer, optional,intent(in),check(shape(ain,1)==ain_d1),depend(ain),intent(hide) :: ain_d1=shape(ain,1)
            integer intent(in),intent(hide),depend(ain_d0) :: evec_d0 = ain_d0
            integer intent(in),intent(hide),depend(ain_d1) :: evec_d1 = ain_d1
            integer intent(in),depend(ain_d0),intent(hide) :: eig_d0 = ain_d0
        end subroutine EigValVecSymTri

        subroutine ComputeDG82(dG82,lmax,m,theta0,dG82_d0,dG82_d1)
            fortranname pycomputedg82
            real*8 dimension(dG82_d0,dG82_d1),intent(out) :: dG82
            integer intent(in) :: lmax
            integer intent(in) :: m
            real*8 intent(in) :: theta0
            integer, optional,intent(in),depend(lmax,m),intent(hide) :: dG82_d0 = lmax-abs(m)+1
            integer, optional,intent(in),depend(lmax,m),intent(hide) :: dG82_d1 = lmax-abs(m)+1
        end subroutine ComputeDG82

        function RandomN(idum)
            fortranname pyrandomn
            integer(kind=4) intent(in,out) :: idum
            real*8 :: RandomN
        end function RandomN

        function RandomGaussian(idum)
            fortranname pyrandomgaussian
            integer(kind=4) intent(in,out) :: idum
            real*8 :: RandomGaussian
        end function RandomGaussian

        subroutine Wigner3j(w3j,jmin,jmax,j2,j3,m1,m2,m3,w3j_d0)
            fortranname pywigner3j
            real*8 dimension(w3j_d0),intent(out) :: w3j
            integer intent(out) :: jmin
            integer intent(out) :: jmax
            integer intent(in) :: j2
            integer intent(in) :: j3
            integer intent(in) :: m1
            integer intent(in) :: m2
            integer intent(in) :: m3
            integer intent(in),intent(hide) :: w3j_d0 = j2+j3+1
        end subroutine Wigner3j

        subroutine SHBias(Shh,lwin,incspectra,ldata,outcspectra,save_cg,Shh_d0,incspectra_d0,outcspectra_d0)
            fortranname pyshbias
            real*8 dimension(Shh_d0),intent(in) :: Shh
            integer, optional,intent(in),depend(Shh_d0) :: lwin = Shh_d0-1
            real*8 dimension(incspectra_d0),intent(in) :: incspectra
            integer, optional,intent(in),depend(incspectra_d0) :: ldata = incspectra_d0-1
            real*8 dimension(outcspectra_d0),intent(out) :: outcspectra
            integer, optional,intent(in) :: save_cg = 0
            integer, optional,intent(in),check(Shh_d0>0),depend(Shh),intent(hide) :: Shh_d0=len(Shh)
            integer, optional,intent(in),check(len(incspectra)>=incspectra_d0),depend(incspectra),intent(hide) :: incspectra_d0=len(incspectra)
            integer, optional,intent(in),depend(ldata,lwin),intent(hide) :: outcspectra_d0 = ldata+lwin
        end subroutine SHBias

        subroutine SHBiasK(tapers,lwin,k,incspectra,ldata,outcspectra,taper_wt,save_cg,taper_wt_d0,tapers_d0,tapers_d1,incspectra_d0,outcspectra_d0)
            fortranname pyshbiask
            real*8 dimension(tapers_d0,tapers_d1),intent(in) :: tapers
            integer, optional,intent(in),depend(tapers_d0) :: lwin = tapers_d0-1
            integer, optional,intent(in),depend(tapers_d1) :: k = tapers_d1
            real*8 dimension(incspectra_d0),intent(in) :: incspectra
            integer, optional,intent(in),depend(incspectra_d0) :: ldata = incspectra_d0-1
            real*8 dimension(outcspectra_d0),intent(out) :: outcspectra
            real*8, optional,dimension(taper_wt_d0),intent(in) :: taper_wt = -1
            integer, optional,intent(in) :: save_cg = 0
            integer, optional,intent(in),check(taper_wt_d0>0),depend(tapers_d1),intent(hide) :: taper_wt_d0=tapers_d1
            integer, optional,intent(in),check(shape(tapers,0)==tapers_d0),depend(tapers),intent(hide) :: tapers_d0=shape(tapers,0)
            integer, optional,intent(in),check(shape(tapers,1)==tapers_d1),depend(tapers),intent(hide) :: tapers_d1=shape(tapers,1)
            integer, optional,intent(in),check(len(incspectra)>=incspectra_d0),depend(incspectra),intent(hide) :: incspectra_d0=len(incspectra)
            integer, optional,intent(in),depend(ldata,lwin),intent(hide) :: outcspectra_d0 = ldata+lwin
        end subroutine SHBiasK

        subroutine SHMultiTaperSE(mtse,sd,sh,lmax,tapers,taper_order,lmaxt,k,lat,lon,taper_wt,norm,csphase,taper_order_d0,taper_wt_d0,sh_d0,sh_d1,sh_d2,tapers_d0,tapers_d1,mtse_d0,sd_d0)
            fortranname pyshmultitaperse
            real*8 dimension(mtse_d0),intent(out) :: mtse
            real*8 dimension(sd_d0),intent(out) :: sd
            real*8 dimension(sh_d0,sh_d1,sh_d2),intent(in) :: sh
            integer, optional,intent(in),depend(sh_d1) :: lmax = sh_d1-1
            real*8 dimension(tapers_d0,tapers_d1),intent(in) :: tapers
            integer dimension(taper_order_d0),intent(in) :: taper_order
            integer, optional,intent(in),depend(tapers_d0) :: lmaxt = tapers_d0-1
            integer, optional,intent(in),depend(tapers_d1) :: k = tapers_d1
            real*8,  optional,intent(in) :: lat = 0.0
            real*8,  optional,intent(in) :: lon = 0.0
            real*8,  optional,dimension(taper_wt_d0),intent(in) :: taper_wt = -1.0
            integer, optional,intent(in) :: norm = 1
            integer, optional,intent(in) :: csphase = 1
            integer, optional,intent(in),check(taper_order_d0>0),depend(taper_order),intent(hide) :: taper_order_d0=len(taper_order)
            integer, optional,intent(in),check(taper_wt_d0>0),depend(tapers_d1),intent(hide) :: taper_wt_d0=tapers_d1
            integer, optional,intent(in),check(sh_d0>0),depend(sh),intent(hide) :: sh_d0=shape(sh,0)
            integer, optional,intent(in),check(sh_d1>0),depend(sh),intent(hide) :: sh_d1=shape(sh,1)
            integer, optional,intent(in),check(sh_d2>0),depend(sh),intent(hide) :: sh_d2=shape(sh,2)
            integer, optional,intent(in),check(tapers_d0>0),depend(tapers),intent(hide) :: tapers_d0=shape(tapers,0)
            integer, optional,intent(in),check(tapers_d1>0),depend(tapers),intent(hide) :: tapers_d1=shape(tapers,1)
            integer, optional,intent(in),check(mtse_d0>0),depend(lmax,lmaxt),intent(hide) :: mtse_d0 = lmax - lmaxt+1
            integer, optional,intent(in),check(sd_d0>0),depend(lmax,lmaxt),intent(hide) :: sd_d0 = lmax-lmaxt+1
        end subroutine SHMultiTaperSE

        subroutine SHMultiTaperCSE(mtse,sd,sh1,lmax1,sh2,lmax2,tapers,taper_order,lmaxt,k,lat,lon,taper_wt,norm,csphase,sh1_d0,sh1_d1,sh1_d2,sh2_d0,sh2_d1,sh2_d2,taper_order_d0,taper_wt_d0,tapers_d0,tapers_d1,sd_d0,mtse_d0)
            fortranname pyshmultitapercse
            real*8 dimension(mtse_d0),intent(out) :: mtse
            real*8 dimension(sd_d0),intent(out) :: sd
            real*8 dimension(sh1_d0,sh1_d1,sh1_d2),intent(in) :: sh1
            integer, optional,intent(in),depend(sh1_d1) :: lmax1 = sh1_d1-1
            real*8 dimension(sh2_d0,sh2_d1,sh2_d2),intent(in) :: sh2
            integer, optional,intent(in),depend(sh2_d1) :: lmax2 = sh2_d2-1
            real*8 dimension(tapers_d0,tapers_d1),intent(in) :: tapers
            integer dimension(taper_order_d0),intent(in) :: taper_order
            integer, optional,intent(in),depend(tapers_d0) :: lmaxt = tapers_d0-1
            integer, optional,intent(in),depend(tapers_d1) :: k = tapers_d1
            real*8, optional,intent(in) :: lat = 0.0
            real*8, optional,intent(in) :: lon = 0.0
            real*8,  optional,dimension(taper_wt_d0),intent(in) :: taper_wt = -1.0
            integer, optional,intent(in) :: norm = 1
            integer, optional,intent(in) :: csphase = 1
            integer, optional,intent(in),check(sh1_d0>0),depend(sh1),intent(hide) :: sh1_d0=shape(sh1,0)
            integer, optional,intent(in),check(sh1_d1>0),depend(sh1),intent(hide) :: sh1_d1=shape(sh1,1)
            integer, optional,intent(in),check(sh1_d2>0),depend(sh1),intent(hide) :: sh1_d2=shape(sh1,2)
            integer, optional,intent(in),check(sh2_d0>0),depend(sh2),intent(hide) :: sh2_d0=shape(sh2,0)
            integer, optional,intent(in),check(sh2_d1>0),depend(sh2),intent(hide) :: sh2_d1=shape(sh2,1)
            integer, optional,intent(in),check(sh2_d2>0),depend(sh2),intent(hide) :: sh2_d2=shape(sh2,2)
            integer, optional,intent(in),check(taper_order_d0>0),depend(taper_order),intent(hide) :: taper_order_d0=len(taper_order)
            integer, optional,intent(in),check(taper_wt_d0>0),depend(tapers_d1),intent(hide) :: taper_wt_d0=tapers_d1
            integer, optional,intent(in),check(tapers_d0>0),depend(tapers),intent(hide) :: tapers_d0=shape(tapers,0)
            integer, optional,intent(in),check(tapers_d1>0),depend(tapers),intent(hide) :: tapers_d1=shape(tapers,1)
            integer, optional,intent(in),check(sd_d0>0),depend(lmax1,lmax2,lmaxt),intent(hide) :: sd_d0 = min(lmax1,lmax2)-lmaxt+1
            integer, optional,intent(in),check(mtse_d0>0),depend(lmax1,lmax2,lmaxt),intent(hide) :: mtse_d0 = min(lmax1,lmax2)-lmaxt+1
        end subroutine SHMultiTaperCSE

        subroutine SHReadJPL(filename,cilm,lmax,lmax_in,gm,formatstring,cilm_d0,cilm_d1,cilm_d2)
            fortranname pyshreadjpl
            character*(*) intent(in) :: filename
            real*8 dimension(cilm_d0,cilm_d1,cilm_d2),intent(out) :: cilm
            integer intent(out) :: lmax
            integer intent(out) :: lmax_in
            real*8, dimension(2),intent(out) :: gm
            character*6, optional,intent(in) :: formatstring = 'E19.12'
            integer, optional,intent(in),intent(hide) :: cilm_d0=2
            integer, optional,intent(in),depend(lmax_in),intent(hide):: cilm_d1 = lmax_in + 1
            integer, optional,intent(in),depend(cilm_d1),intent(hide) :: cilm_d2=cilm_d1
        end subroutine SHReadJPL

        subroutine SHReadJPLError(filename,cilm,error,lmax,lmax_in,gm,formatstring,cilm_d0,cilm_d1,cilm_d2,error_d0,error_d1,error_d2)
            fortranname pyshreadjplerror
            character*(*) intent(in) :: filename
            real*8 dimension(cilm_d0,cilm_d1,cilm_d2),intent(out) :: cilm
            real*8, dimension(error_d0,error_d1,error_d2),intent(out) :: error
            integer intent(out) :: lmax
            integer intent(out) :: lmax_in
            real*8, dimension(2),intent(out) :: gm
            character*6, optional,intent(in) :: formatstring = 'E19.12'
            integer, optional,intent(in),intent(hide) :: cilm_d0=2
            integer, optional,intent(in),depend(lmax_in),intent(hide):: cilm_d1 = lmax_in + 1
            integer, optional,intent(in),depend(cilm_d1),intent(hide) :: cilm_d2=cilm_d1
            integer, optional,intent(in),intent(hide) :: error_d0=2
            integer, optional,intent(in),depend(cilm_d1),intent(hide) :: error_d1=cilm_d1
            integer, optional,intent(in),depend(cilm_d2),intent(hide) :: error_d2=cilm_d2
        end subroutine SHReadJPLError

        subroutine SHRead2(filename,cilm,lmax,lmax_in,gm,r0_pot,dot,doystart,doyend,epoch,cilm_d0,cilm_d1,cilm_d2,dot_d0,dot_d1,dot_d2)
            fortranname pyshread2
            character*(*) intent(in) :: filename
            real*8 dimension(cilm_d0,cilm_d1,cilm_d2),intent(out) :: cilm
            integer intent(out) :: lmax
            integer, intent(in) :: lmax_in
            real*8 intent(out) :: gm
            real*8 intent(out) :: r0_pot
            real*8, dimension(dot_d0,dot_d1,dot_d2),intent(out) :: dot
            real*8, intent(out) :: doystart
            real*8, intent(out) :: doyend
            real*8, intent(out) :: epoch
            integer, optional,intent(in),intent(hide) :: cilm_d0=2
            integer optional,intent(in),intent(hide),depent(lmax_in) :: cilm_d1 = lmax_in + 1
            integer, optional,intent(in),intent(hide),depent(cilm_d1) :: cilm_d2=cilm_d1
            integer, optional,intent(in),intent(hide) :: dot_d0=2
            integer, optional,intent(in),depend(cilm_d1),intent(hide) :: dot_d1=cilm_d1
            integer, optional,intent(in),depend(cilm_d2),intent(hide) :: dot_d2=cilm_d1
        end subroutine SHRead2

        subroutine SHRead2Error(filename,cilm,error,lmax,lmax_in,gm,r0_pot,dot,doystart,doyend,epoch,cilm_d0,cilm_d1,cilm_d2,error_d0,error_d1,error_d2,dot_d0,dot_d1,dot_d2)
            fortranname pyshread2error
            character*(*) intent(in) :: filename
            real*8 dimension(cilm_d0,cilm_d1,cilm_d2),intent(out) :: cilm
            real*8, dimension(error_d0,error_d1,error_d2),intent(out) :: error
            integer intent(out) :: lmax
            integer, intent(in) :: lmax_in
            real*8 intent(out) :: gm
            real*8 intent(out) :: r0_pot
            real*8, dimension(dot_d0,dot_d1,dot_d2),intent(out) :: dot
            real*8, intent(out) :: doystart
            real*8, intent(out) :: doyend
            real*8, intent(out) :: epoch
            integer, optional,intent(in),intent(hide) :: cilm_d0=2
            integer optional,intent(in),intent(hide),depent(lmax_in) :: cilm_d1 = lmax_in + 1
            integer, optional,intent(in),intent(hide),depent(cilm_d1) :: cilm_d2=cilm_d1
            integer, optional,intent(in),intent(hide) :: error_d0=2
            integer, optioanl,intent(in),depend(cilm_d1),intent(hide) :: error_d1=cilm_d1
            integer, optional,intent(in),depend(cilm_d2),intent(hide) :: error_d2=cilm_d2
            integer, optional,intent(in),intent(hide) :: dot_d0=2
            integer, optional,intent(in),depend(cilm_d1),intent(hide) :: dot_d1=cilm_d1
            integer, optional,intent(in),depend(cilm_d2),intent(hide) :: dot_d2=cilm_d1
        end subroutine SHRead2Error
        
        subroutine MakeGeoidGridDH(geoid,cilm,lmax,r0pot,GM,PotRef,omega,r,sampling,order,nlat,nlong,lmax_calc,a,f,cilm_d0,cilm_d1,cilm_d2,geoid_d0,geoid_d1)
            fortranname pymakegeoidgriddh
            real*8 dimension(geoid_d0,geoid_d1),intent(out) :: geoid
            real*8 dimension(cilm_d0,cilm_d1,cilm_d2),intent(in) :: cilm
            integer,optional,intent(in),depend(cilm_d1) :: lmax = cilm_d1 - 1
            real*8 intent(in) :: r0pot
            real*8 intent(in) :: GM
            real*8 intent(in) :: PotRef
            real*8, optional,intent(in) :: omega = 0.0
            real*8, optional,intent(in) :: r = r0pot
            integer,optional,check(sampling==1 || sampling==2),intent(in) :: sampling = 2
            integer, optional,intent(in) :: order = 2
            integer intent(hide) :: nlat
            integer intent(hide) :: nlong
            integer, optional,intent(in),depend(lmax) :: lmax_calc = lmax
            real*8, optional,intent(in) :: a = r
            real*8, optional,intent(in) :: f = 0.0
            integer, optional,intent(in),check(shape(cilm,0)==cilm_d0),depend(cilm),intent(hide) :: cilm_d0=shape(cilm,0)
            integer, optional,intent(in),check(shape(cilm,1)==cilm_d1),depend(cilm),intent(hide) :: cilm_d1=shape(cilm,1)
            integer, optional,intent(in),check(shape(cilm,2)==cilm_d2),depend(cilm),intent(hide) :: cilm_d2=shape(cilm,2)
            integer optional,intent(in),intent(hide),depend(lmax) :: geoid_d0 = 2*(lmax+1)
            integer optional,intent(in),intent(hide),depend(geoid_d0) :: geoid_d1 = sampling*geoid_d0
        end subroutine MakeGeoidGridDH

        subroutine PlmON(p,lmax,z,csphase,cnorm,p_d0)
            fortranname pyplmon
            real*8 dimension(p_d0),intent(out) :: p
            integer intent(in) :: lmax
            real*8 intent(in) :: z
            integer, optional,intent(in) :: csphase = 1
            integer, optional,intent(in) :: cnorm = 0
            integer intent(hide),depend(lmax) :: p_d0 = (lmax+1)*(lmax+2)/2
        end subroutine PlmON

        subroutine PlON(p,lmax,z,p_d0)
            fortranname pyplon
            real*8 dimension(p_d0),intent(out) :: p
            integer intent(in) :: lmax
            real*8 intent(in) :: z
            integer intent(hide),depend(lmax) :: p_d0 = lmax+1
        end subroutine PlON

        subroutine PlmON_d1(p,dp,lmax,z,csphase,cnorm,p_d0,dp_d0)
            fortranname pyplmon_d1
            real*8 dimension(p_d0),intent(out) :: p
            real*8 dimension(dp_d0),intent(out) :: dp
            integer intent(in) :: lmax
            real*8 intent(in) :: z
            integer, optional,intent(in) :: csphase = 1
            integer, optional,intent(in) :: cnorm = 0
            integer intent(hide),depend(lmax) :: p_d0 = (lmax+1)*(lmax+2)/2
            integer intent(hide),depend(lmax) :: dp_d0 = (lmax+1)*(lmax+2)/2
        end subroutine PlmON_d1

        subroutine PlON_d1(p,dp,lmax,z,p_d0,dp_d0)
            fortranname pyplon_d1
            real*8 dimension(p_d0),intent(out) :: p
            real*8 dimension(dp_d0),intent(out) :: dp
            integer intent(in) :: lmax
            real*8 intent(in) :: z
            integer intent(hide),depend(lmax) :: p_d0 = lmax+1
            integer intent(hide),depend(lmax) :: dp_d0 = lmax+1
        end subroutine PlON_d1

        subroutine MakeCircleCoord(coord,lat,lon,theta0,cinterval,cnum,coord_d0,coord_d1)
            fortranname pymakecirclecoord
            real*8 dimension(coord_d0,coord_d1),intent(out) :: coord
            real*8 intent(in) :: lat
            real*8 intent(in) :: lon
            real*8 intent(in) :: theta0
            real*8, optional,intent(in) :: cinterval = 1.0
            integer,intent(hide) :: cnum
            integer intent(in),intent(hide),depend(cinterval) :: coord_d0 = (int)(360.0/cinterval)
            integer intent(in),intent(hide) :: coord_d1 = 2
        end subroutine MakeCircleCoord

        subroutine SHReturnTapers(theta0,lmax,tapers,eigenvalues,taper_order,eigenvalues_d0,tapers_d0,tapers_d1,taper_order_d0)
            fortranname pyshreturntapers
            real*8 intent(in) :: theta0
            integer intent(in) :: lmax
            real*8 dimension(tapers_d0,tapers_d1),intent(out) :: tapers
            real*8 dimension(eigenvalues_d0),intent(out) :: eigenvalues
            integer dimension(taper_order_d0),intent(out) :: taper_order
            integer, optional,intent(in),depend(lmax),intent(hide) :: eigenvalues_d0 = (lmax+1)*(lmax+1)
            integer, optional,intent(in),depend(lmax),intent(hide) :: tapers_d0 = (lmax+1)
            integer, optional,intent(in),depend(lmax),intent(hide) :: tapers_d1 = (lmax+1)*(lmax+1)
            integer, optional,intent(in),depend(lmax),intent(hide) :: taper_order_d0 = (lmax+1)*(lmax+1)
        end subroutine SHReturnTapers

        function SHSjkPG(incspectra,l,m,mprime,hj_real,hk_real,mj,mk,lwin,hkcc,hk_real_d0,incspectra_d0,hj_real_d0)
            fortranname pyshsjkpg
            real*8 dimension(incspectra_d0),intent(in) :: incspectra
            integer intent(in) :: l
            integer intent(in) :: m
            integer intent(in) :: mprime
            real*8 dimension(hj_real_d0),intent(in) :: hj_real
            real*8 dimension(hk_real_d0),intent(in) :: hk_real
            integer intent(in) :: mj
            integer intent(in) :: mk
            integer intent(in) :: lwin
            integer intent(in) :: hkcc
            integer, optional,intent(in),check(len(hk_real)>=hk_real_d0),depend(hk_real),intent(hide) :: hk_real_d0=len(hk_real)
            integer, optional,intent(in),check(len(incspectra)>=incspectra_d0),depend(incspectra),intent(hide) :: incspectra_d0=len(incspectra)
            integer, optional,intent(in),check(len(hj_real)>=hj_real_d0),depend(hj_real),intent(hide) :: hj_real_d0=len(hj_real)
            complex*16 :: SHSjkPG
        end function SHSjkPG

        subroutine SHMTVarOpt(l,tapers,taper_order,lwin,kmax,Sff,var_opt,var_unit,weight_opt,nocross,taper_order_d0,weight_opt_d0,weight_opt_d1,var_unit_d0,var_opt_d0,Sff_d0,tapers_d0,tapers_d1)
            fortranname pyshmtvaropt
            integer intent(in) :: l
            real*8 dimension(tapers_d0,tapers_d1),intent(in) :: tapers
            integer dimension(taper_order_d0),intent(in) :: taper_order
            integer optional,intent(in), depend(tapers_d0) :: lwin = tapers_d0 - 1
            integer optional,intent(in),depent(tapers_d1) :: kmax = tapers_d1
            real*8 dimension(Sff_d0),intent(in) :: Sff
            real*8 dimension(var_opt_d0),intent(out) :: var_opt
            real*8 dimension(var_unit_d0),intent(out) :: var_unit
            real*8, dimension(weight_opt_d0,weight_opt_d1),intent(out) :: weight_opt
            integer, optional,intent(in) :: nocross = 0
            integer, optional,intent(in),check(len(taper_order)>=taper_order_d0),depend(kmax),intent(hide) :: taper_order_d0 = kmax
            integer intent(in),depend(kmax),intent(hide) :: weight_opt_d0 = kmax
            integer intent(in),depend(kmax),intent(hide) :: weight_opt_d1 = kmax
            integer intent(in),depend(kmax),intent(hide) :: var_unit_d0 = kmax
            integer intent(in),depend(kmax),intent(hide) :: var_opt_d0 = kmax
            integer, optional,intent(in),check(len(Sff)>=Sff_d0),depend(Sff),intent(hide) :: Sff_d0=len(Sff)
            integer, optional,intent(in),check(shape(tapers,0)==tapers_d0),depend(tapers),intent(hide) :: tapers_d0=shape(tapers,0)
            integer, optional,intent(in),check(shape(tapers,1)==tapers_d1),depend(tapers),intent(hide) :: tapers_d1=shape(tapers,1)
        end subroutine SHMTVarOpt

        subroutine SHMTCouplingMatrix(Mmt, lmax, tapers, lwin, k, taper_wt, Mmt_d0, Mmt_d1, tapers_d0, tapers_d1, taper_wt_d0)
            fortranname pyshmtcouplingmatrix
            real*8, dimension(Mmt_d0,Mmt_d1), intent(out) :: Mmt
            integer, intent(in)  :: lmax
            integer, optional, intent(in), depend(tapers_d1) :: k = tapers_d1
            integer, optional, intent(in), depend(tapers_d0) :: lwin = tapers_d0-1
            real*8,  intent(in) :: tapers(tapers_d0,tapers_d1)
            real*8, optional,dimension(taper_wt_d0),intent(in) :: taper_wt = -1
            integer, optional,depend(lmax),intent(hide)      :: Mmt_d0 = lmax+1
            integer, optional,depend(lmax,lwin),intent(hide) :: Mmt_d1 = lmax+lwin+1
            integer, optional,depend(tapers),intent(hide)    :: tapers_d0 = shape(tapers,0)
            integer, optional,depend(tapers),intent(hide)    :: tapers_d1 = shape(tapers,1)
            integer, optional,depend(tapers_d1),intent(hide) :: taper_wt_d0=tapers_d1
        end subroutine

        subroutine SHMTDebias(mtdebias,mtspectra,lmax,tapers,lwin,k,nl,lmid,n,taper_wt,mtdebias_d0,mtdebias_d1,taper_wt_d0,mtspectra_d0,mtspectra_d1,tapers_d0,tapers_d1,lmid_d0)
            fortranname pyshmtdebias
            real*8 dimension(mtdebias_d0,mtdebias_d1),intent(out) :: mtdebias
            real*8 dimension(lmid_d0),intent(out) :: lmid
            integer intent(hide) :: n
            real*8 dimension(mtspectra_d0,mtspectra_d1),intent(in) :: mtspectra
            integer, optional,intent(in),depend(mtspectra_d1) :: lmax = mtspectra_d1-1
            real*8 dimension(tapers_d0,tapers_d1),intent(in) :: tapers
            integer, optional,intent(in),depend(tapers_d0) :: lwin = tapers_d0-1
            integer, optional,intent(in),depend(tapers_d1) :: k = tapers_d1
            integer intent(in) :: nl
            real*8, optional,dimension(taper_wt_d0),intent(in) :: taper_wt = -1
            integer, optional,intent(in),intent(hide) :: mtdebias_d0 = 2
            integer, optional,intent(in),depend(lmid_d0),intent(hide) :: mtdebias_d1 = lmid_d0
            integer, optional,intent(in),depend(tapers_d1),intent(hide) :: taper_wt_d0=tapers_d1
            integer, optional,intent(in),depend(mtspectra),intent(hide) :: mtspectra_d0=shape(mtspectra,0)
            integer, optional,intent(in),depend(mtspectra),intent(hide) :: mtspectra_d1=shape(mtspectra,1)
            integer, optional,intent(in),depend(tapers),intent(hide) :: tapers_d0=shape(tapers,0)
            integer, optional,intent(in),depend(tapers),intent(hide) :: tapers_d1=shape(tapers,1)
            integer, optional,intent(in),depend(lmax,nl),intent(hide) :: lmid_d0 = (int)(ceil((float)(lmax+1)/(float)nl))
        end subroutine SHMTDebias

        subroutine MakeGravGridDH(cilm,lmax,gm,r0,a,f,rad,theta,phi,total,n,sampling,lmax_calc,omega,normal_gravity,phi_d0,phi_d1,total_d0,total_d1,rad_d0,rad_d1,cilm_d0,cilm_d1,cilm_d2,theta_d0,theta_d1)
            fortranname pymakegravgriddh
            real*8 dimension(cilm_d0,cilm_d1,cilm_d2),intent(in) :: cilm
            integer,optional,intent(in),depend(cilm_d1) :: lmax=cilm_d1-1
            real*8 intent(in) :: gm
            real*8 intent(in) :: r0
            real*8 optional,intent(in),depend(r0) :: a = r0
            real*8 optional,intent(in) :: f = 0.0
            real*8 dimension(rad_d0,rad_d1),intent(out) :: rad
            real*8 dimension(theta_d0,theta_d1),intent(out) :: theta
            real*8 dimension(phi_d0,phi_d1),intent(out) :: phi
            real*8 dimension(total_d0,total_d1),intent(out) :: total
            integer intent(hide) :: n
            integer, optional,intent(in) :: sampling = 2
            integer, optional,intent(in),depend(lmax) :: lmax_calc = lmax
            real*8, optional,intent(in) :: omega = 0.0
            integer, optional,intent(in) :: normal_gravity = 1
            integer intent(in),intent(hide),depend(lmax) :: phi_d0 = 2*(lmax+1)
            integer intent(in),intent(hide),depend(sampling,phi_d0) :: phi_d1 = sampling*phi_d0
            integer intent(in),intent(hide),depend(phi_d0) :: total_d0 = phi_d0
            integer intent(in),intent(hide),depend(phi_d1) :: total_d1 = phi_d1
            integer intent(in),intent(hide),depend(phi_d0) :: rad_d0 = phi_d0
            integer intent(in),intent(hide),depend(phi_d1) :: rad_d1 = phi_d1
            integer, optional,intent(in),check(shape(cilm,0)==cilm_d0),depend(cilm),intent(hide) :: cilm_d0=shape(cilm,0)
            integer, optional,intent(in),check(shape(cilm,1)==cilm_d1),depend(cilm),intent(hide) :: cilm_d1=shape(cilm,1)
            integer, optional,intent(in),check(shape(cilm,2)==cilm_d2),depend(cilm),intent(hide) :: cilm_d2=shape(cilm,2)
            integer intent(in),intent(hide),depend(phi_d0) :: theta_d0 = phi_d0
            integer intent(in),intent(hide),depend(phi_d1) :: theta_d1 = phi_d1
        end subroutine MakeGravGridDH

        function NormalGravity(geocentric_lat,gm,omega,a,b)
            fortranname pynormalgravity
            real*8 intent(in) :: geocentric_lat
            real*8 intent(in) :: gm
            real*8 intent(in) :: omega
            real*8 intent(in) :: a
            real*8 intent(in) :: b
            real*8 :: NormalGravity
        end function NormalGravity

        function SHConfidence(l_conf,r)
            fortranname pyshconfidence
            integer intent(in) :: l_conf
            real*8 intent(in) :: r
            real*8 :: SHConfidence
        end function SHConfidence

        function SHMagPowerL(c,a,r,l,c_d0,c_d1,c_d2)
            fortranname pyshmagpowerl
            real*8 dimension(c_d0,c_d1,c_d2),intent(in) :: c
            real*8 intent(in) :: a
            real*8, optional,intent(in),depend(a) :: r = a
            integer intent(in) :: l
            integer, optional,intent(in),check(shape(c,0)==c_d0),depend(c),intent(hide) :: c_d0=shape(c,0)
            integer, optional,intent(in),check(shape(c,1)==c_d1),depend(c),intent(hide) :: c_d1=shape(c,1)
            integer, optional,intent(in),check(shape(c,2)==c_d2),depend(c),intent(hide) :: c_d2=shape(c,2)
            real*8 :: SHMagPowerL
        end function SHMagPowerL

        subroutine SHMagPowerSpectrum(c,a,r,lmax,spectrum,c_d0,c_d1,c_d2,spectrum_d0)
            fortranname pyshmagpowerspectrum
            real*8 dimension(c_d0,c_d1,c_d2),intent(in) :: c
            real*8 intent(in) :: a
            real*8, optional,intent(in) :: r = a
            integer, optional,intent(in) :: lmax = c_d1 - 1
            real*8 dimension(spectrum_d0),intent(out) :: spectrum
            integer, optional,intent(in),check(shape(c,0)==c_d0),depend(c),intent(hide) :: c_d0=shape(c,0)
            integer, optional,intent(in),check(shape(c,1)==c_d1),depend(c),intent(hide) :: c_d1=shape(c,1)
            integer, optional,intent(in),check(shape(c,2)==c_d2),depend(c),intent(hide) :: c_d2=shape(c,2)
            integer, optional,intent(in),intent(hide),depend(c_d1) :: spectrum_d0 = c_d1
        end subroutine SHMagPowerSpectrum

        subroutine SHExpandDHC(grid,n,cilm,lmax,norm,sampling,csphase,lmax_calc,cilm_d0,cilm_d1,cilm_d2,grid_d0,grid_d1)
            fortranname pyshexpanddhc
            complex*16 dimension(grid_d0,grid_d1),intent(in) :: grid
            integer, intent(hide),depend(grid_d0) :: n=grid_d0
            complex*16 dimension(cilm_d0,cilm_d1,cilm_d2),intent(out) :: cilm
            integer intent(hide) :: lmax
            integer, optional,intent(in) :: norm = 1
            integer, optional,intent(in) :: sampling = 1
            integer, optional,intent(in) :: csphase = 1
            integer, optional,intent(in),depend(n) :: lmax_calc = n/2-1
            integer, optional,intent(in) :: cilm_d0=2
            integer, optional,intent(in),depend(lmax_calc),intent(hide) :: cilm_d1=lmax_calc+1
            integer, optional,intent(in),depend(lmax_calc),intent(hide) :: cilm_d2=lmax_calc+1
            integer, optional,intent(in),check(shape(grid,0)==grid_d0),depend(grid),intent(hide) :: grid_d0=shape(grid,0)
            integer, optional,intent(in),check(shape(grid,1)==grid_d1),depend(grid),intent(hide) :: grid_d1=shape(grid,1)
        end subroutine SHExpandDHC

        subroutine MakeGridDHC(griddh,n,cilm,lmax,norm,sampling,csphase,lmax_calc,cilm_d0,cilm_d1,cilm_d2,griddh_d0,griddh_d1)
            fortranname pymakegriddhc
            complex*16 dimension(griddh_d0,griddh_d1),intent(out) :: griddh
            integer intent(hide) :: n
            complex*16 dimension(cilm_d0,cilm_d1,cilm_d2),intent(in) :: cilm
            integer, optional,intent(in),depend(cilm_d1) :: lmax=cilm_d1-1
            integer, optional,intent(in) :: norm = 1
            integer, optional,intent(in) :: sampling = 1
            integer, optional,intent(in) :: csphase = 1
            integer, optional,intent(in),depend(lmax) :: lmax_calc=lmax
            integer, optional,intent(in),check(shape(cilm,0)==cilm_d0),depend(cilm),intent(hide) :: cilm_d0=shape(cilm,0)
            integer, optional,intent(in),check(shape(cilm,1)==cilm_d1),depend(cilm),intent(hide) :: cilm_d1=shape(cilm,1)
            integer, optional,intent(in),check(shape(cilm,2)==cilm_d2),depend(cilm),intent(hide) :: cilm_d2=shape(cilm,2)
            integer, optional,intent(in),depend(lmax),intent(hide) :: griddh_d0=2*(lmax+1)
            integer, optional,intent(in),depend(griddh_d0,sampling),intent(hide) :: griddh_d1=sampling*griddh_d0
        end subroutine MakeGridDHC

        subroutine MakeGridGLQC(gridglq,cilm,lmax,zero,norm,csphase,lmax_calc,gridglq_d0,gridglq_d1,cilm_d0,cilm_d1,cilm_d2,zero_d0)
            fortranname pymakegridglqc
            complex*16 dimension(gridglq_d0,gridglq_d1),intent(out) :: gridglq
            complex*16 dimension(cilm_d0,cilm_d1,cilm_d2),intent(in) :: cilm
            integer, optional,intent(in),depend(cilm_d1) :: lmax = cilm_d1-1
            real*8, dimension(zero_d0),intent(in) :: zero
            integer, optional,intent(in) :: norm = 1
            integer, optional,intent(in) :: csphase = 1
            integer, optional,intent(in),depend(lmax) :: lmax_calc = lmax
            integer, optional,intent(in),depend(lmax),intent(hide) :: gridglq_d0 = lmax+1
            integer, optional,intent(in),depend(lmax),intent(hide) :: gridglq_d1 = 2*lmax+1
            integer, optional,intent(in),check(shape(cilm,0)==cilm_d0),depend(cilm),intent(hide) :: cilm_d0=shape(cilm,0)
            integer, optional,intent(in),check(shape(cilm,1)==cilm_d1),depend(cilm),intent(hide) :: cilm_d1=shape(cilm,1)
            integer, optional,intent(in),check(shape(cilm,2)==cilm_d2),depend(cilm),intent(hide) :: cilm_d2=shape(cilm,2)
            integer, optional,intent(in),check(len(zero)>=zero_d0),depend(zero),intent(hide) :: zero_d0=len(zero)
        end subroutine MakeGridGLQC

        subroutine SHExpandGLQC(cilm,lmax,gridglq,w,zero,norm,csphase,lmax_calc,cilm_d0,cilm_d1,cilm_d2,gridglq_d0,gridglq_d1,zero_d0,w_d0)
            fortranname pyshexpandglqc
            complex*16 dimension(cilm_d0,cilm_d1,cilm_d2),intent(out) :: cilm
            complex*16 dimension(gridglq_d0,gridglq_d1),intent(in) :: gridglq
            real*8 dimension(w_d0),intent(in) :: w
            real*8, dimension(zero_d0),intent(in) :: zero
            integer, intent(hide),depend(gridglq_d0) :: lmax=gridglq_d0-1
            integer, optional,intent(in) :: norm = 1
            integer, optional,intent(in) :: csphase = 1
            integer, optional,intent(in),depend(lmax) :: lmax_calc = lmax
            integer, optional,intent(in) :: cilm_d0 = 2
            integer, optional,intent(in),depend(lmax_calc),intent(hide) :: cilm_d1 = lmax_calc+1
            integer, optional,intent(in),depend(lmax_calc),intent(hide) :: cilm_d2 = lmax_calc+1
            integer, optional,intent(in),depend(gridglq),intent(hide) :: gridglq_d0=shape(gridglq,0)
            integer, optional,intent(in),depend(gridglq),intent(hide) :: gridglq_d1=shape(gridglq,1)
            integer, optional,intent(in),depend(zero),intent(hide) :: zero_d0=len(zero)
            integer, optional,intent(in),check(len(w)>=w_d0),depend(w),intent(hide) :: w_d0=len(w)
        end subroutine SHExpandGLQC

        function SHPowerLC(c,l,c_d0,c_d1,c_d2)
            fortranname pyshpowerlc
            complex*16 dimension(c_d0,c_d1,c_d2),intent(in) :: c
            integer intent(in) :: l
            integer, optional,intent(in),check(shape(c,0)==c_d0),depend(c),intent(hide) :: c_d0=shape(c,0)
            integer, optional,intent(in),check(shape(c,1)==c_d1),depend(c),intent(hide) :: c_d1=shape(c,1)
            integer, optional,intent(in),check(shape(c,2)==c_d2),depend(c),intent(hide) :: c_d2=shape(c,2)
            real*8 :: SHPowerLC
        end function SHPowerLC

        function SHPowerDensityLC(c,l,c_d0,c_d1,c_d2)
            fortranname pyshpowerdensitylc
            complex*16 dimension(c_d0,c_d1,c_d2),intent(in) :: c
            integer intent(in) :: l
            integer, optional,intent(in),check(shape(c,0)==c_d0),depend(c),intent(hide) :: c_d0=shape(c,0)
            integer, optional,intent(in),check(shape(c,1)==c_d1),depend(c),intent(hide) :: c_d1=shape(c,1)
            integer, optional,intent(in),check(shape(c,2)==c_d2),depend(c),intent(hide) :: c_d2=shape(c,2)
            real*8 :: SHPowerDensityLC
        end function SHPowerDensityLC

        function SHCrossPowerLC(c1,c2,l,c2_d0,c2_d1,c2_d2,c1_d0,c1_d1,c1_d2)
            fortranname pyshcrosspowerlc
            complex*16 dimension(c1_d0,c1_d1,c1_d2),intent(in) :: c1
            complex*16 dimension(c2_d0,c2_d1,c2_d2),intent(in) :: c2
            integer intent(in) :: l
            integer, optional,intent(in),check(shape(c2,0)==c2_d0),depend(c2),intent(hide) :: c2_d0=shape(c2,0)
            integer, optional,intent(in),check(shape(c2,1)==c2_d1),depend(c2),intent(hide) :: c2_d1=shape(c2,1)
            integer, optional,intent(in),check(shape(c2,2)==c2_d2),depend(c2),intent(hide) :: c2_d2=shape(c2,2)
            integer, optional,intent(in),check(shape(c1,0)==c1_d0),depend(c1),intent(hide) :: c1_d0=shape(c1,0)
            integer, optional,intent(in),check(shape(c1,1)==c1_d1),depend(c1),intent(hide) :: c1_d1=shape(c1,1)
            integer, optional,intent(in),check(shape(c1,2)==c1_d2),depend(c1),intent(hide) :: c1_d2=shape(c1,2)
            complex*16 :: SHCrossPowerLC
        end function SHCrossPowerLC

        function SHCrossPowerDensityLC(c1,c2,l,c2_d0,c2_d1,c2_d2,c1_d0,c1_d1,c1_d2)
            fortranname pyshcrosspowerdensitylc
            complex*16 dimension(c1_d0,c1_d1,c1_d2),intent(in) :: c1
            complex*16 dimension(c2_d0,c2_d1,c2_d2),intent(in) :: c2
            integer intent(in) :: l
            integer, optional,intent(in),check(shape(c2,0)==c2_d0),depend(c2),intent(hide) :: c2_d0=shape(c2,0)
            integer, optional,intent(in),check(shape(c2,1)==c2_d1),depend(c2),intent(hide) :: c2_d1=shape(c2,1)
            integer, optional,intent(in),check(shape(c2,2)==c2_d2),depend(c2),intent(hide) :: c2_d2=shape(c2,2)
            integer, optional,intent(in),check(shape(c1,0)==c1_d0),depend(c1),intent(hide) :: c1_d0=shape(c1,0)
            integer, optional,intent(in),check(shape(c1,1)==c1_d1),depend(c1),intent(hide) :: c1_d1=shape(c1,1)
            integer, optional,intent(in),check(shape(c1,2)==c1_d2),depend(c1),intent(hide) :: c1_d2=shape(c1,2)
            complex*16 :: SHCrossPowerDensityLC
        end function SHCrossPowerDensityLC

        subroutine SHPowerSpectrumC(c,lmax,spectra,c_d0,c_d1,c_d2,spectra_d0)
            fortranname pyshpowerspectrumc
            complex*16 dimension(c_d0,c_d1,c_d2),intent(in) :: c
            integer, optional,intent(in),depend(c_d1) :: lmax = c_d1-1
            real*8 dimension(spectra_d0),intent(out) :: spectra
            integer, optional,intent(in),check(shape(c,0)==c_d0),depend(c),intent(hide) :: c_d0=shape(c,0)
            integer, optional,intent(in),check(shape(c,1)==c_d1),depend(c),intent(hide) :: c_d1=shape(c,1)
            integer, optional,intent(in),check(shape(c,2)==c_d2),depend(c),intent(hide) :: c_d2=shape(c,2)
            integer, optional,intent(in),depend(lmax),intent(hide) :: spectra_d0 = lmax+1
        end subroutine SHPowerSpectrumC

        subroutine SHPowerSpectrumDensityC(c,lmax,spectra,c_d0,c_d1,c_d2,spectra_d0)
            fortranname pyshpowerspectrumdensityc
            complex*16 dimension(c_d0,c_d1,c_d2),intent(in) :: c
            integer, optional,intent(in),depend(c_d1) :: lmax = c_d1-1
            real*8 dimension(spectra_d0),intent(out) :: spectra
            integer, optional,intent(in),check(shape(c,0)==c_d0),depend(c),intent(hide) :: c_d0=shape(c,0)
            integer, optional,intent(in),check(shape(c,1)==c_d1),depend(c),intent(hide) :: c_d1=shape(c,1)
            integer, optional,intent(in),check(shape(c,2)==c_d2),depend(c),intent(hide) :: c_d2=shape(c,2)
            integer, optional,intent(in),depend(lmax),intent(hide) :: spectra_d0 = lmax+1
        end subroutine SHPowerSpectrumDensityC

        subroutine SHCrossPowerSpectrumC(c1,c2,lmax,cspectra,c2_d0,c2_d1,c2_d2,c1_d0,c1_d1,c1_d2,cspectra_d0)
            fortranname pyshcrosspowerspectrumc
            complex*16 dimension(c1_d0,c1_d1,c1_d2),intent(in) :: c1
            complex*16 dimension(c2_d0,c2_d1,c2_d2),intent(in) :: c2
            integer, optional,intent(in),depend(c1_d1,c2_d1) :: lmax = min(c1_d1,c2_d1)-1
            complex*16 dimension(cspectra_d0),intent(out) :: cspectra
            integer, optional,intent(in),check(shape(c2,0)==c2_d0),depend(c2),intent(hide) :: c2_d0=shape(c2,0)
            integer, optional,intent(in),check(shape(c2,1)==c2_d1),depend(c2),intent(hide) :: c2_d1=shape(c2,1)
            integer, optional,intent(in),check(shape(c2,2)==c2_d2),depend(c2),intent(hide) :: c2_d2=shape(c2,2)
            integer, optional,intent(in),check(shape(c1,0)==c1_d0),depend(c1),intent(hide) :: c1_d0=shape(c1,0)
            integer, optional,intent(in),check(shape(c1,1)==c1_d1),depend(c1),intent(hide) :: c1_d1=shape(c1,1)
            integer, optional,intent(in),check(shape(c1,2)==c1_d2),depend(c1),intent(hide) :: c1_d2=shape(c1,2)
            integer, optioanl,intent(in),depend(lmax),intent(hide) :: cspectra_d0 = lmax+1
        end subroutine SHCrossPowerSpectrumC

        subroutine SHCrossPowerSpectrumDensityC(c1,c2,lmax,cspectra,c2_d0,c2_d1,c2_d2,c1_d0,c1_d1,c1_d2,cspectra_d0)
            fortranname pyshcrosspowerspectrumdensityc
            complex*16 dimension(c1_d0,c1_d1,c1_d2),intent(in) :: c1
            complex*16 dimension(c2_d0,c2_d1,c2_d2),intent(in) :: c2
            integer, optional,intent(in),depend(c1_d1,c2_d1) :: lmax = min(c1_d1,c2_d1)-1
            complex*16 dimension(cspectra_d0),intent(out) :: cspectra
            integer, optional,intent(in),check(shape(c2,0)==c2_d0),depend(c2),intent(hide) :: c2_d0=shape(c2,0)
            integer, optional,intent(in),check(shape(c2,1)==c2_d1),depend(c2),intent(hide) :: c2_d1=shape(c2,1)
            integer, optional,intent(in),check(shape(c2,2)==c2_d2),depend(c2),intent(hide) :: c2_d2=shape(c2,2)
            integer, optional,intent(in),check(shape(c1,0)==c1_d0),depend(c1),intent(hide) :: c1_d0=shape(c1,0)
            integer, optional,intent(in),check(shape(c1,1)==c1_d1),depend(c1),intent(hide) :: c1_d1=shape(c1,1)
            integer, optional,intent(in),check(shape(c1,2)==c1_d2),depend(c1),intent(hide) :: c1_d2=shape(c1,2)
            integer, optioanl,intent(in),depend(lmax),intent(hide) :: cspectra_d0 = lmax+1
        end subroutine SHCrossPowerSpectrumDensityC

        subroutine SHBiasAdmitCorr(sgt,sgg,stt,lmax,tapers,lwin,k,admit,corr,mtdef,taper_wt,taper_wt_d0,sgt_d0,stt_d0,admit_d0,tapers_d0,tapers_d1,corr_d0,sgg_d0)
            fortranname pyshbiasadmitcorr
            real*8 dimension(admit_d0),intent(out) :: admit
            real*8 dimension(corr_d0),intent(out) :: corr
            real*8 dimension(sgt_d0),intent(in) :: sgt
            real*8 dimension(sgg_d0),intent(in) :: sgg
            real*8 dimension(stt_d0),intent(in) :: stt
            integer, optional,intent(in),depend(sgt_d0) :: lmax = sgt_d0-1
            real*8 dimension(tapers_d0,tapers_d1),intent(in) :: tapers
            integer, optional,intent(in),depend(tapers_d0) :: lwin = tapers_d0-1
            integer, optional,intent(in),depend(tapers_d1) :: k = tapers_d1
            integer, optional,intent(in) :: mtdef = 1
            real*8, optional,dimension(taper_wt_d0),intent(in) :: taper_wt = -1
            integer, optional,intent(in),depend(tapers_d1),intent(hide) :: taper_wt_d0=tapers_d1
            integer, optional,intent(in),depend(sgt),intent(hide) :: sgt_d0=len(sgt)
            integer, optional,intent(in),depend(stt),intent(hide) :: stt_d0=len(stt)
            integer, optional,intent(in),depend(tapers),intent(hide) :: tapers_d0=shape(tapers,0)
            integer, optional,intent(in),depend(tapers),intent(hide) :: tapers_d1=shape(tapers,1)
            integer, optional,intent(in),depend(sgg),intent(hide) :: sgg_d0=len(sgg)
            integer, optional,intent(in),depend(lmax,lwin),intent(hide) :: corr_d0 = lmax-lwin+1
            integer, optional,intent(in),depend(lmax,lwin),intent(hide) :: admit_d0 = lmax-lwin+1
        end subroutine SHBiasAdmitCorr

        subroutine SHCilmToVector(cilm,vector,lmax,vector_d0,cilm_d0,cilm_d1,cilm_d2)
            fortranname pyshcilmtovector
            real*8 dimension(cilm_d0,cilm_d1,cilm_d2),intent(in) :: cilm
            real*8 dimension(vector_d0),intent(out) :: vector
            integer, optional,intent(in),depend(cilm_d1) :: lmax = cilm_d1-1
            integer, optional,intent(in),depend(lmax),intent(hide) :: vector_d0 = (lmax+1)*(lmax+1)
            integer, optional,intent(in),check(shape(cilm,0)==cilm_d0),depend(cilm),intent(hide) :: cilm_d0=shape(cilm,0)
            integer, optional,intent(in),check(shape(cilm,1)==cilm_d1),depend(cilm),intent(hide) :: cilm_d1=shape(cilm,1)
            integer, optional,intent(in),check(shape(cilm,2)==cilm_d2),depend(cilm),intent(hide) :: cilm_d2=shape(cilm,2)
        end subroutine SHCilmToVector

        subroutine SHVectorToCilm(vector,cilm,lmax,vector_d0,cilm_d0,cilm_d1,cilm_d2)
            fortranname pyshvectortocilm
            real*8 dimension(vector_d0),intent(in) :: vector
            real*8 dimension(cilm_d0,cilm_d1,cilm_d2),intent(out) :: cilm
            integer optional,intent(in),depend(vector_d0) :: lmax = sqrt(vector_d0)-1
            integer, optional,intent(in),check(len(vector)>=vector_d0),depend(vector),intent(hide) :: vector_d0=len(vector)
            integer, optional,intent(in),intent(hide) :: cilm_d0 = 2
            integer, optional,intent(in),depend(lmax),intent(hide) :: cilm_d1 = lmax+1
            integer, optional,intent(in),depend(lmax),intent(hide) :: cilm_d2 = lmax+1
        end subroutine SHVectorToCilm

        subroutine ComputeDMap(Dij,dh_mask,n_dh,lmax,sampling,dh_mask_d0,dh_mask_d1,Dij_d0,Dij_d1)
            fortranname pycomputedmap
            real*8 dimension(Dij_d0,Dij_d1),intent(out) :: Dij
            integer dimension(dh_mask_d0,dh_mask_d1),intent(in) :: dh_mask
            integer, optional,intent(in),depend(dh_mask_d0) :: n_dh = dh_mask_d0
            integer, optional,intent(in),depend(dh_mask_d0,dh_mask_d1):: sampling = dh_mask_d1/dh_mask_d0
            integer, intent(in) :: lmax
            integer, optional,intent(in),check(shape(dh_mask,0)==dh_mask_d0),depend(dh_mask),intent(hide) :: dh_mask_d0=shape(dh_mask,0)
            integer, optional,intent(in),check(shape(dh_mask,1)==dh_mask_d1),depend(dh_mask),intent(hide) :: dh_mask_d1=shape(dh_mask,1)
            integer, optional,intent(in),depend(lmax),intent(hide) :: Dij_d0 = (lmax+1)*(lmax+1)
            integer, optional,intent(in),depend(lmax),intent(hide) :: Dij_d1 = (lmax+1)*(lmax+1)
        end subroutine ComputeDMap

        subroutine SHReturnTapersMap(tapers,eigenvalues,dh_mask,n_dh,lmax,sampling,Ntapers,dh_mask_d0,dh_mask_d1,tapers_d0,tapers_d1,eigenvalues_d0)
            fortranname pyshreturntapersmap
            real*8 dimension(tapers_d0,tapers_d1),intent(out) :: tapers
            real*8 dimension(eigenvalues_d0),intent(out) :: eigenvalues
            integer dimension(dh_mask_d0,dh_mask_d1),intent(in) :: dh_mask
            integer, optional,intent(in),depend(dh_mask_d0) :: n_dh = dh_mask_d0
            integer, optional,intent(in) :: sampling = dh_mask_d1 / dh_mask_d0
            integer intent(in) :: lmax
            integer, optional,intent(in),depend(lmax) :: Ntapers = (lmax+1)*(lmax+1)
            integer, optional,intent(in),check(shape(dh_mask,0)==dh_mask_d0),depend(dh_mask),intent(hide) :: dh_mask_d0=shape(dh_mask,0)
            integer, optional,intent(in),check(shape(dh_mask,1)==dh_mask_d1),depend(dh_mask),intent(hide) :: dh_mask_d1=shape(dh_mask,1)
            integer intent(in),depend(lmax),intent(hide) :: tapers_d0 = (lmax+1)*(lmax+1)
            integer intent(in),depend(Ntapers),intent(hide) :: tapers_d1 = Ntapers
            integer intent(in),depend(Ntapers),intent(hide) :: eigenvalues_d0 = Ntapers
        end subroutine SHReturnTapersMap

        subroutine Curve2Mask(dhgrid,n,sampling,profile,nprofile,NP,centralmeridian,profile_d0,profile_d1,dhgrid_d0,dhgrid_d1)
            fortranname pycurve2mask
            integer dimension(dhgrid_d0,dhgrid_d1),intent(out) :: dhgrid
            integer intent(in) :: n
            integer, optional,intent(in) :: sampling = 1
            real*8 dimension(profile_d0,profile_d1),intent(in) :: profile
            integer,optional,intent(in),depend(profile_d0) :: nprofile = profile_d0
            integer intent(in):: NP
            integer, optional, intent(in) :: centralmeridian = 0
            integer, optional,intent(in),check(shape(profile,0)==profile_d0),depend(profile),intent(hide) :: profile_d0=shape(profile,0)
            integer, optional,intent(in),check(shape(profile,1)==profile_d1),depend(profile),intent(hide) :: profile_d1=shape(profile,1)
            integer, optional,intent(in),depend(n),intent(hide) :: dhgrid_d0 = n
            integer, optional,intent(in),depend(n,sampling),intent(hide) :: dhgrid_d1 = n*sampling
        end subroutine Curve2Mask

        subroutine MakeEllipseCoord(coord,lat,lon,dec,A_theta,B_theta,cinterval,cnum,coord_d0,coord_d1)
            fortranname pymakeellipsecoord
            real*8 dimension(coord_d0,coord_d1),intent(out) :: coord
            real*8 intent(in) :: lat
            real*8 intent(in) :: lon
            real*8 intent(in) :: dec
            real*8 intent(in) :: A_theta
            real*8 intent(in) :: B_theta
            real*8, optional,intent(in) :: cinterval = 1.0
            integer, intent(hide) :: cnum
            integer intent(in),intent(hide),depend(interval) :: coord_d0 = (int)(360.0/cinterval)
            integer intent(in),intent(hide) :: coord_d1 = 2
        end subroutine MakeEllipseCoord

        subroutine MakeGravGradGridDH(cilm,lmax,gm,r0,a,f,vxx,vyy,vzz,vxy,vxz,vyz,n,sampling,lmax_calc,vyz_d0,vyz_d1,vyy_d0,vyy_d1,cilm_d0,cilm_d1,cilm_d2,vzz_d0,vzz_d1,vxy_d0,vxy_d1,vxx_d0,vxx_d1,vxz_d0,vxz_d1)
            fortranname pymakegravgradgriddh
            real*8 dimension(cilm_d0,cilm_d1,cilm_d2),intent(in) :: cilm
            integer, optional,intent(in),depend(cilm_d1) :: lmax=cilm_d1-1
            real*8 intent(in) :: gm
            real*8 intent(in) :: r0
            real*8 optional,intent(in) :: a=r0
            real*8 optional,intent(in) :: f=0
            real*8 dimension(vxx_d0,vxx_d1),intent(out) :: vxx
            real*8 dimension(vyy_d0,vyy_d1),intent(out) :: vyy
            real*8 dimension(vzz_d0,vzz_d1),intent(out) :: vzz
            real*8 dimension(vxy_d0,vxy_d1),intent(out) :: vxy
            real*8 dimension(vxz_d0,vxz_d1),intent(out) :: vxz
            real*8 dimension(vyz_d0,vyz_d1),intent(out) :: vyz
            integer intent(hide) :: n
            integer, optional,intent(in) :: sampling = 2
            integer, optional,intent(in),depend(lmax) :: lmax_calc=lmax
            integer, optional,intent(in),depend(lmax),intent(hide) :: vyz_d0=2*(lmax+1)
            integer, optional,intent(in),depend(vyz_d0,sampling),intent(hide) :: vyz_d1=sampling*vyz_d0
            integer, optional,intent(in),depend(lmax),intent(hide) :: vyy_d0=2*(lmax+1)
            integer, optional,intent(in),depend(vyy_d0,sampling),intent(hide) :: vyy_d1 = sampling*vyy_d0
            integer, optional,intent(in),check(shape(cilm,0)==cilm_d0),depend(cilm),intent(hide) :: cilm_d0=shape(cilm,0)
            integer, optional,intent(in),check(shape(cilm,1)==cilm_d1),depend(cilm),intent(hide) :: cilm_d1=shape(cilm,1)
            integer, optional,intent(in),check(shape(cilm,2)==cilm_d2),depend(cilm),intent(hide) :: cilm_d2=shape(cilm,2)
            integer, optional,intent(in),depend(lmax),intent(hide) :: vzz_d0=2*(lmax+1)
            integer, optional,intent(in),depend(vzz_d0,sampling),intent(hide) :: vzz_d1=sampling*vzz_d0
            integer, optional,intent(in),depend(lmax),intent(hide) :: vxy_d0=2*(lmax+1)
            integer, optional,intent(in),depend(vxy_d0,sampling),intent(hide) :: vxy_d1=sampling*vxy_d0
            integer, optional,intent(in),depend(lmax),intent(hide) :: vxx_d0=2*(lmax+1)
            integer, optional,intent(in),depend(vxx_d0,sampling),intent(hide) :: vxx_d1=sampling*vxx_d0
            integer, optional,intent(in),depend(lmax),intent(hide) :: vxz_d0=2*(lmax+1)
            integer, optional,intent(in),depend(vxz_d0,sampling),intent(hide) :: vxz_d1=sampling*vxz_d0
        end subroutine MakeGravGradGridDH
        
    end interface 
    
end python module _SHTOOLS
